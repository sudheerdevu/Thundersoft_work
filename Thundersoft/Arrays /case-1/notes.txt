If you want to use raw pointers (int *a) instead of std::vector to store and manipulate the array, here’s how you could structure the code. This approach will manage the array memory manually using pointers within the Sorting class. The code will handle displaying the array in ascending and descending order without sorting or changing the order of elements in memory.

1. Header File: Sorting.h

#ifndef SORTING_H
#define SORTING_H

class Sorting {
private:
    int* arr;     // Pointer to hold the array
    int size;     // Size of the array

public:
    // Constructor to initialize the array
    Sorting(int* inputArr, int size);

    // Destructor to release allocated memory
    ~Sorting();

    // Function to display the array in ascending order
    void displayAscending() const;

    // Function to display the array in descending order
    void displayDescending() const;
};

#endif

2. Source File: Sorting.cpp

#include "Sorting.h"
#include <iostream>

// Constructor to initialize the array with pointer and size
Sorting::Sorting(int* inputArr, int size) : size(size) {
    arr = new int[size];
    for (int i = 0; i < size; ++i) {
        arr[i] = inputArr[i];
    }
}

// Destructor to release allocated memory
Sorting::~Sorting() {
    delete[] arr;
}

// Displays the array elements in ascending order (from the start to end)
void Sorting::displayAscending() const {
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

// Displays the array elements in descending order (from end to start)
void Sorting::displayDescending() const {
    for (int i = size - 1; i >= 0; --i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

3. Main Program: main.cpp

#include <iostream>
#include "Sorting.h"

int main() {
    int n;
    std::cout << "Enter the number of elements: ";
    std::cin >> n;

    int* arr = new int[n];
    std::cout << "Enter the elements:\n";
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }

    // Initialize Sorting object with pointer to the array and its size
    Sorting sortingObj(arr, n);

    int choice;
    std::cout << "Choose display order (1 for Ascending, 2 for Descending): ";
    std::cin >> choice;

    if (choice == 1) {
        std::cout << "Array displayed in ascending order:\n";
        sortingObj.displayAscending();
    } else if (choice == 2) {
        std::cout << "Array displayed in descending order:\n";
        sortingObj.displayDescending();
    } else {
        std::cout << "Invalid choice.\n";
        delete[] arr;
        return 1;
    }

    // Clean up dynamically allocated memory in main
    delete[] arr;

    return 0;
}

Explanation

	•	Pointer Array in Class: The Sorting class stores the array using a pointer, int* arr, and the array size as an integer, size.
	•	Constructor: Allocates memory for the array and copies elements from the input array to arr.
	•	Destructor: Deallocates the memory used by arr to avoid memory leaks.
	•	Display Functions:
	•	displayAscending(): Displays elements from the start to the end of the array.
	•	displayDescending(): Displays elements from the end to the start of the array.
	•	Main Program:
	•	Dynamically allocates memory for arr, reads input from the user, and passes arr to the Sorting class.
	•	Calls either displayAscending() or displayDescending() based on user choice.
	•	After the display, it frees the memory allocated to arr in main.
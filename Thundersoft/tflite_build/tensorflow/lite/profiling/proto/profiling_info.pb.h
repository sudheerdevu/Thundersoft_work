// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/profiling/proto/profiling_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
namespace tflite {
namespace profiling {
class BenchmarkProfilingData;
struct BenchmarkProfilingDataDefaultTypeInternal;
extern BenchmarkProfilingDataDefaultTypeInternal _BenchmarkProfilingData_default_instance_;
class DelegateProfilingData;
struct DelegateProfilingDataDefaultTypeInternal;
extern DelegateProfilingDataDefaultTypeInternal _DelegateProfilingData_default_instance_;
class ModelProfilingData;
struct ModelProfilingDataDefaultTypeInternal;
extern ModelProfilingDataDefaultTypeInternal _ModelProfilingData_default_instance_;
class OpProfileData;
struct OpProfileDataDefaultTypeInternal;
extern OpProfileDataDefaultTypeInternal _OpProfileData_default_instance_;
class OpProfilingStat;
struct OpProfilingStatDefaultTypeInternal;
extern OpProfilingStatDefaultTypeInternal _OpProfilingStat_default_instance_;
class SubGraphProfilingData;
struct SubGraphProfilingDataDefaultTypeInternal;
extern SubGraphProfilingDataDefaultTypeInternal _SubGraphProfilingData_default_instance_;
}  // namespace profiling
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::profiling::BenchmarkProfilingData* Arena::CreateMaybeMessage<::tflite::profiling::BenchmarkProfilingData>(Arena*);
template<> ::tflite::profiling::DelegateProfilingData* Arena::CreateMaybeMessage<::tflite::profiling::DelegateProfilingData>(Arena*);
template<> ::tflite::profiling::ModelProfilingData* Arena::CreateMaybeMessage<::tflite::profiling::ModelProfilingData>(Arena*);
template<> ::tflite::profiling::OpProfileData* Arena::CreateMaybeMessage<::tflite::profiling::OpProfileData>(Arena*);
template<> ::tflite::profiling::OpProfilingStat* Arena::CreateMaybeMessage<::tflite::profiling::OpProfilingStat>(Arena*);
template<> ::tflite::profiling::SubGraphProfilingData* Arena::CreateMaybeMessage<::tflite::profiling::SubGraphProfilingData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace profiling {

// ===================================================================

class BenchmarkProfilingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.BenchmarkProfilingData) */ {
 public:
  inline BenchmarkProfilingData() : BenchmarkProfilingData(nullptr) {}
  ~BenchmarkProfilingData() override;
  explicit PROTOBUF_CONSTEXPR BenchmarkProfilingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BenchmarkProfilingData(const BenchmarkProfilingData& from);
  BenchmarkProfilingData(BenchmarkProfilingData&& from) noexcept
    : BenchmarkProfilingData() {
    *this = ::std::move(from);
  }

  inline BenchmarkProfilingData& operator=(const BenchmarkProfilingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkProfilingData& operator=(BenchmarkProfilingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkProfilingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkProfilingData* internal_default_instance() {
    return reinterpret_cast<const BenchmarkProfilingData*>(
               &_BenchmarkProfilingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BenchmarkProfilingData& a, BenchmarkProfilingData& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkProfilingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkProfilingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkProfilingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkProfilingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BenchmarkProfilingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BenchmarkProfilingData& from) {
    BenchmarkProfilingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkProfilingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.BenchmarkProfilingData";
  }
  protected:
  explicit BenchmarkProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kInitProfileFieldNumber = 2,
    kRuntimeProfileFieldNumber = 3,
  };
  // optional string model_name = 1;
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional .tflite.profiling.ModelProfilingData init_profile = 2;
  bool has_init_profile() const;
  private:
  bool _internal_has_init_profile() const;
  public:
  void clear_init_profile();
  const ::tflite::profiling::ModelProfilingData& init_profile() const;
  PROTOBUF_NODISCARD ::tflite::profiling::ModelProfilingData* release_init_profile();
  ::tflite::profiling::ModelProfilingData* mutable_init_profile();
  void set_allocated_init_profile(::tflite::profiling::ModelProfilingData* init_profile);
  private:
  const ::tflite::profiling::ModelProfilingData& _internal_init_profile() const;
  ::tflite::profiling::ModelProfilingData* _internal_mutable_init_profile();
  public:
  void unsafe_arena_set_allocated_init_profile(
      ::tflite::profiling::ModelProfilingData* init_profile);
  ::tflite::profiling::ModelProfilingData* unsafe_arena_release_init_profile();

  // optional .tflite.profiling.ModelProfilingData runtime_profile = 3;
  bool has_runtime_profile() const;
  private:
  bool _internal_has_runtime_profile() const;
  public:
  void clear_runtime_profile();
  const ::tflite::profiling::ModelProfilingData& runtime_profile() const;
  PROTOBUF_NODISCARD ::tflite::profiling::ModelProfilingData* release_runtime_profile();
  ::tflite::profiling::ModelProfilingData* mutable_runtime_profile();
  void set_allocated_runtime_profile(::tflite::profiling::ModelProfilingData* runtime_profile);
  private:
  const ::tflite::profiling::ModelProfilingData& _internal_runtime_profile() const;
  ::tflite::profiling::ModelProfilingData* _internal_mutable_runtime_profile();
  public:
  void unsafe_arena_set_allocated_runtime_profile(
      ::tflite::profiling::ModelProfilingData* runtime_profile);
  ::tflite::profiling::ModelProfilingData* unsafe_arena_release_runtime_profile();

  // @@protoc_insertion_point(class_scope:tflite.profiling.BenchmarkProfilingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::tflite::profiling::ModelProfilingData* init_profile_;
    ::tflite::profiling::ModelProfilingData* runtime_profile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ModelProfilingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.ModelProfilingData) */ {
 public:
  inline ModelProfilingData() : ModelProfilingData(nullptr) {}
  ~ModelProfilingData() override;
  explicit PROTOBUF_CONSTEXPR ModelProfilingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelProfilingData(const ModelProfilingData& from);
  ModelProfilingData(ModelProfilingData&& from) noexcept
    : ModelProfilingData() {
    *this = ::std::move(from);
  }

  inline ModelProfilingData& operator=(const ModelProfilingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProfilingData& operator=(ModelProfilingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelProfilingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelProfilingData* internal_default_instance() {
    return reinterpret_cast<const ModelProfilingData*>(
               &_ModelProfilingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelProfilingData& a, ModelProfilingData& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProfilingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProfilingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelProfilingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelProfilingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelProfilingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelProfilingData& from) {
    ModelProfilingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelProfilingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.ModelProfilingData";
  }
  protected:
  explicit ModelProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubgraphProfilesFieldNumber = 1,
    kDelegateProfilesFieldNumber = 2,
  };
  // repeated .tflite.profiling.SubGraphProfilingData subgraph_profiles = 1;
  int subgraph_profiles_size() const;
  private:
  int _internal_subgraph_profiles_size() const;
  public:
  void clear_subgraph_profiles();
  ::tflite::profiling::SubGraphProfilingData* mutable_subgraph_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::SubGraphProfilingData >*
      mutable_subgraph_profiles();
  private:
  const ::tflite::profiling::SubGraphProfilingData& _internal_subgraph_profiles(int index) const;
  ::tflite::profiling::SubGraphProfilingData* _internal_add_subgraph_profiles();
  public:
  const ::tflite::profiling::SubGraphProfilingData& subgraph_profiles(int index) const;
  ::tflite::profiling::SubGraphProfilingData* add_subgraph_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::SubGraphProfilingData >&
      subgraph_profiles() const;

  // repeated .tflite.profiling.DelegateProfilingData delegate_profiles = 2;
  int delegate_profiles_size() const;
  private:
  int _internal_delegate_profiles_size() const;
  public:
  void clear_delegate_profiles();
  ::tflite::profiling::DelegateProfilingData* mutable_delegate_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::DelegateProfilingData >*
      mutable_delegate_profiles();
  private:
  const ::tflite::profiling::DelegateProfilingData& _internal_delegate_profiles(int index) const;
  ::tflite::profiling::DelegateProfilingData* _internal_add_delegate_profiles();
  public:
  const ::tflite::profiling::DelegateProfilingData& delegate_profiles(int index) const;
  ::tflite::profiling::DelegateProfilingData* add_delegate_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::DelegateProfilingData >&
      delegate_profiles() const;

  // @@protoc_insertion_point(class_scope:tflite.profiling.ModelProfilingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::SubGraphProfilingData > subgraph_profiles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::DelegateProfilingData > delegate_profiles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
};
// -------------------------------------------------------------------

class SubGraphProfilingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.SubGraphProfilingData) */ {
 public:
  inline SubGraphProfilingData() : SubGraphProfilingData(nullptr) {}
  ~SubGraphProfilingData() override;
  explicit PROTOBUF_CONSTEXPR SubGraphProfilingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubGraphProfilingData(const SubGraphProfilingData& from);
  SubGraphProfilingData(SubGraphProfilingData&& from) noexcept
    : SubGraphProfilingData() {
    *this = ::std::move(from);
  }

  inline SubGraphProfilingData& operator=(const SubGraphProfilingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubGraphProfilingData& operator=(SubGraphProfilingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubGraphProfilingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubGraphProfilingData* internal_default_instance() {
    return reinterpret_cast<const SubGraphProfilingData*>(
               &_SubGraphProfilingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubGraphProfilingData& a, SubGraphProfilingData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubGraphProfilingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubGraphProfilingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubGraphProfilingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubGraphProfilingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubGraphProfilingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubGraphProfilingData& from) {
    SubGraphProfilingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubGraphProfilingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.SubGraphProfilingData";
  }
  protected:
  explicit SubGraphProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerOpProfilesFieldNumber = 3,
    kSubgraphNameFieldNumber = 1,
    kSubgraphIndexFieldNumber = 2,
  };
  // repeated .tflite.profiling.OpProfileData per_op_profiles = 3;
  int per_op_profiles_size() const;
  private:
  int _internal_per_op_profiles_size() const;
  public:
  void clear_per_op_profiles();
  ::tflite::profiling::OpProfileData* mutable_per_op_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >*
      mutable_per_op_profiles();
  private:
  const ::tflite::profiling::OpProfileData& _internal_per_op_profiles(int index) const;
  ::tflite::profiling::OpProfileData* _internal_add_per_op_profiles();
  public:
  const ::tflite::profiling::OpProfileData& per_op_profiles(int index) const;
  ::tflite::profiling::OpProfileData* add_per_op_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >&
      per_op_profiles() const;

  // optional string subgraph_name = 1;
  bool has_subgraph_name() const;
  private:
  bool _internal_has_subgraph_name() const;
  public:
  void clear_subgraph_name();
  const std::string& subgraph_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subgraph_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subgraph_name();
  PROTOBUF_NODISCARD std::string* release_subgraph_name();
  void set_allocated_subgraph_name(std::string* subgraph_name);
  private:
  const std::string& _internal_subgraph_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subgraph_name(const std::string& value);
  std::string* _internal_mutable_subgraph_name();
  public:

  // optional int32 subgraph_index = 2;
  bool has_subgraph_index() const;
  private:
  bool _internal_has_subgraph_index() const;
  public:
  void clear_subgraph_index();
  int32_t subgraph_index() const;
  void set_subgraph_index(int32_t value);
  private:
  int32_t _internal_subgraph_index() const;
  void _internal_set_subgraph_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.SubGraphProfilingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData > per_op_profiles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subgraph_name_;
    int32_t subgraph_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DelegateProfilingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.DelegateProfilingData) */ {
 public:
  inline DelegateProfilingData() : DelegateProfilingData(nullptr) {}
  ~DelegateProfilingData() override;
  explicit PROTOBUF_CONSTEXPR DelegateProfilingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelegateProfilingData(const DelegateProfilingData& from);
  DelegateProfilingData(DelegateProfilingData&& from) noexcept
    : DelegateProfilingData() {
    *this = ::std::move(from);
  }

  inline DelegateProfilingData& operator=(const DelegateProfilingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateProfilingData& operator=(DelegateProfilingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelegateProfilingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelegateProfilingData* internal_default_instance() {
    return reinterpret_cast<const DelegateProfilingData*>(
               &_DelegateProfilingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DelegateProfilingData& a, DelegateProfilingData& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateProfilingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateProfilingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelegateProfilingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelegateProfilingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelegateProfilingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelegateProfilingData& from) {
    DelegateProfilingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateProfilingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.DelegateProfilingData";
  }
  protected:
  explicit DelegateProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerOpProfilesFieldNumber = 2,
    kDelegateNameFieldNumber = 1,
  };
  // repeated .tflite.profiling.OpProfileData per_op_profiles = 2;
  int per_op_profiles_size() const;
  private:
  int _internal_per_op_profiles_size() const;
  public:
  void clear_per_op_profiles();
  ::tflite::profiling::OpProfileData* mutable_per_op_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >*
      mutable_per_op_profiles();
  private:
  const ::tflite::profiling::OpProfileData& _internal_per_op_profiles(int index) const;
  ::tflite::profiling::OpProfileData* _internal_add_per_op_profiles();
  public:
  const ::tflite::profiling::OpProfileData& per_op_profiles(int index) const;
  ::tflite::profiling::OpProfileData* add_per_op_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >&
      per_op_profiles() const;

  // optional string delegate_name = 1;
  bool has_delegate_name() const;
  private:
  bool _internal_has_delegate_name() const;
  public:
  void clear_delegate_name();
  const std::string& delegate_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate_name();
  PROTOBUF_NODISCARD std::string* release_delegate_name();
  void set_allocated_delegate_name(std::string* delegate_name);
  private:
  const std::string& _internal_delegate_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate_name(const std::string& value);
  std::string* _internal_mutable_delegate_name();
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.DelegateProfilingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData > per_op_profiles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
};
// -------------------------------------------------------------------

class OpProfilingStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.OpProfilingStat) */ {
 public:
  inline OpProfilingStat() : OpProfilingStat(nullptr) {}
  ~OpProfilingStat() override;
  explicit PROTOBUF_CONSTEXPR OpProfilingStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpProfilingStat(const OpProfilingStat& from);
  OpProfilingStat(OpProfilingStat&& from) noexcept
    : OpProfilingStat() {
    *this = ::std::move(from);
  }

  inline OpProfilingStat& operator=(const OpProfilingStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpProfilingStat& operator=(OpProfilingStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpProfilingStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpProfilingStat* internal_default_instance() {
    return reinterpret_cast<const OpProfilingStat*>(
               &_OpProfilingStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OpProfilingStat& a, OpProfilingStat& b) {
    a.Swap(&b);
  }
  inline void Swap(OpProfilingStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpProfilingStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpProfilingStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpProfilingStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpProfilingStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpProfilingStat& from) {
    OpProfilingStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpProfilingStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.OpProfilingStat";
  }
  protected:
  explicit OpProfilingStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 1,
    kLastFieldNumber = 2,
    kAvgFieldNumber = 3,
    kStddevFieldNumber = 4,
    kVarianceFieldNumber = 5,
    kMinFieldNumber = 6,
    kMaxFieldNumber = 7,
    kSumFieldNumber = 8,
    kCountFieldNumber = 9,
  };
  // optional int64 first = 1;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  int64_t first() const;
  void set_first(int64_t value);
  private:
  int64_t _internal_first() const;
  void _internal_set_first(int64_t value);
  public:

  // optional int64 last = 2;
  bool has_last() const;
  private:
  bool _internal_has_last() const;
  public:
  void clear_last();
  int64_t last() const;
  void set_last(int64_t value);
  private:
  int64_t _internal_last() const;
  void _internal_set_last(int64_t value);
  public:

  // optional int64 avg = 3;
  bool has_avg() const;
  private:
  bool _internal_has_avg() const;
  public:
  void clear_avg();
  int64_t avg() const;
  void set_avg(int64_t value);
  private:
  int64_t _internal_avg() const;
  void _internal_set_avg(int64_t value);
  public:

  // optional float stddev = 4;
  bool has_stddev() const;
  private:
  bool _internal_has_stddev() const;
  public:
  void clear_stddev();
  float stddev() const;
  void set_stddev(float value);
  private:
  float _internal_stddev() const;
  void _internal_set_stddev(float value);
  public:

  // optional float variance = 5;
  bool has_variance() const;
  private:
  bool _internal_has_variance() const;
  public:
  void clear_variance();
  float variance() const;
  void set_variance(float value);
  private:
  float _internal_variance() const;
  void _internal_set_variance(float value);
  public:

  // optional int64 min = 6;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  int64_t min() const;
  void set_min(int64_t value);
  private:
  int64_t _internal_min() const;
  void _internal_set_min(int64_t value);
  public:

  // optional int64 max = 7;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  int64_t max() const;
  void set_max(int64_t value);
  private:
  int64_t _internal_max() const;
  void _internal_set_max(int64_t value);
  public:

  // optional int64 sum = 8;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  int64_t sum() const;
  void set_sum(int64_t value);
  private:
  int64_t _internal_sum() const;
  void _internal_set_sum(int64_t value);
  public:

  // optional int64 count = 9;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.OpProfilingStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t first_;
    int64_t last_;
    int64_t avg_;
    float stddev_;
    float variance_;
    int64_t min_;
    int64_t max_;
    int64_t sum_;
    int64_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
};
// -------------------------------------------------------------------

class OpProfileData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.OpProfileData) */ {
 public:
  inline OpProfileData() : OpProfileData(nullptr) {}
  ~OpProfileData() override;
  explicit PROTOBUF_CONSTEXPR OpProfileData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpProfileData(const OpProfileData& from);
  OpProfileData(OpProfileData&& from) noexcept
    : OpProfileData() {
    *this = ::std::move(from);
  }

  inline OpProfileData& operator=(const OpProfileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpProfileData& operator=(OpProfileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpProfileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpProfileData* internal_default_instance() {
    return reinterpret_cast<const OpProfileData*>(
               &_OpProfileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpProfileData& a, OpProfileData& b) {
    a.Swap(&b);
  }
  inline void Swap(OpProfileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpProfileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpProfileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpProfileData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpProfileData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpProfileData& from) {
    OpProfileData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpProfileData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.OpProfileData";
  }
  protected:
  explicit OpProfileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
    kNameFieldNumber = 5,
    kInferenceMicrosecondsFieldNumber = 2,
    kMemKbFieldNumber = 3,
    kTimesCalledFieldNumber = 4,
    kRunOrderFieldNumber = 6,
  };
  // optional string node_type = 1;
  bool has_node_type() const;
  private:
  bool _internal_has_node_type() const;
  public:
  void clear_node_type();
  const std::string& node_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_type();
  PROTOBUF_NODISCARD std::string* release_node_type();
  void set_allocated_node_type(std::string* node_type);
  private:
  const std::string& _internal_node_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_type(const std::string& value);
  std::string* _internal_mutable_node_type();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .tflite.profiling.OpProfilingStat inference_microseconds = 2;
  bool has_inference_microseconds() const;
  private:
  bool _internal_has_inference_microseconds() const;
  public:
  void clear_inference_microseconds();
  const ::tflite::profiling::OpProfilingStat& inference_microseconds() const;
  PROTOBUF_NODISCARD ::tflite::profiling::OpProfilingStat* release_inference_microseconds();
  ::tflite::profiling::OpProfilingStat* mutable_inference_microseconds();
  void set_allocated_inference_microseconds(::tflite::profiling::OpProfilingStat* inference_microseconds);
  private:
  const ::tflite::profiling::OpProfilingStat& _internal_inference_microseconds() const;
  ::tflite::profiling::OpProfilingStat* _internal_mutable_inference_microseconds();
  public:
  void unsafe_arena_set_allocated_inference_microseconds(
      ::tflite::profiling::OpProfilingStat* inference_microseconds);
  ::tflite::profiling::OpProfilingStat* unsafe_arena_release_inference_microseconds();

  // optional .tflite.profiling.OpProfilingStat mem_kb = 3;
  bool has_mem_kb() const;
  private:
  bool _internal_has_mem_kb() const;
  public:
  void clear_mem_kb();
  const ::tflite::profiling::OpProfilingStat& mem_kb() const;
  PROTOBUF_NODISCARD ::tflite::profiling::OpProfilingStat* release_mem_kb();
  ::tflite::profiling::OpProfilingStat* mutable_mem_kb();
  void set_allocated_mem_kb(::tflite::profiling::OpProfilingStat* mem_kb);
  private:
  const ::tflite::profiling::OpProfilingStat& _internal_mem_kb() const;
  ::tflite::profiling::OpProfilingStat* _internal_mutable_mem_kb();
  public:
  void unsafe_arena_set_allocated_mem_kb(
      ::tflite::profiling::OpProfilingStat* mem_kb);
  ::tflite::profiling::OpProfilingStat* unsafe_arena_release_mem_kb();

  // optional int64 times_called = 4;
  bool has_times_called() const;
  private:
  bool _internal_has_times_called() const;
  public:
  void clear_times_called();
  int64_t times_called() const;
  void set_times_called(int64_t value);
  private:
  int64_t _internal_times_called() const;
  void _internal_set_times_called(int64_t value);
  public:

  // optional int64 run_order = 6;
  bool has_run_order() const;
  private:
  bool _internal_has_run_order() const;
  public:
  void clear_run_order();
  int64_t run_order() const;
  void set_run_order(int64_t value);
  private:
  int64_t _internal_run_order() const;
  void _internal_set_run_order(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.OpProfileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::tflite::profiling::OpProfilingStat* inference_microseconds_;
    ::tflite::profiling::OpProfilingStat* mem_kb_;
    int64_t times_called_;
    int64_t run_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BenchmarkProfilingData

// optional string model_name = 1;
inline bool BenchmarkProfilingData::_internal_has_model_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BenchmarkProfilingData::has_model_name() const {
  return _internal_has_model_name();
}
inline void BenchmarkProfilingData::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BenchmarkProfilingData::model_name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.BenchmarkProfilingData.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BenchmarkProfilingData::set_model_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.BenchmarkProfilingData.model_name)
}
inline std::string* BenchmarkProfilingData::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.BenchmarkProfilingData.model_name)
  return _s;
}
inline const std::string& BenchmarkProfilingData::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void BenchmarkProfilingData::_internal_set_model_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BenchmarkProfilingData::_internal_mutable_model_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BenchmarkProfilingData::release_model_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.BenchmarkProfilingData.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BenchmarkProfilingData::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.BenchmarkProfilingData.model_name)
}

// optional .tflite.profiling.ModelProfilingData init_profile = 2;
inline bool BenchmarkProfilingData::_internal_has_init_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.init_profile_ != nullptr);
  return value;
}
inline bool BenchmarkProfilingData::has_init_profile() const {
  return _internal_has_init_profile();
}
inline void BenchmarkProfilingData::clear_init_profile() {
  if (_impl_.init_profile_ != nullptr) _impl_.init_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::profiling::ModelProfilingData& BenchmarkProfilingData::_internal_init_profile() const {
  const ::tflite::profiling::ModelProfilingData* p = _impl_.init_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::profiling::ModelProfilingData&>(
      ::tflite::profiling::_ModelProfilingData_default_instance_);
}
inline const ::tflite::profiling::ModelProfilingData& BenchmarkProfilingData::init_profile() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.BenchmarkProfilingData.init_profile)
  return _internal_init_profile();
}
inline void BenchmarkProfilingData::unsafe_arena_set_allocated_init_profile(
    ::tflite::profiling::ModelProfilingData* init_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.init_profile_);
  }
  _impl_.init_profile_ = init_profile;
  if (init_profile) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.profiling.BenchmarkProfilingData.init_profile)
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::release_init_profile() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::profiling::ModelProfilingData* temp = _impl_.init_profile_;
  _impl_.init_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::unsafe_arena_release_init_profile() {
  // @@protoc_insertion_point(field_release:tflite.profiling.BenchmarkProfilingData.init_profile)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::profiling::ModelProfilingData* temp = _impl_.init_profile_;
  _impl_.init_profile_ = nullptr;
  return temp;
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::_internal_mutable_init_profile() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.init_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::profiling::ModelProfilingData>(GetArenaForAllocation());
    _impl_.init_profile_ = p;
  }
  return _impl_.init_profile_;
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::mutable_init_profile() {
  ::tflite::profiling::ModelProfilingData* _msg = _internal_mutable_init_profile();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.BenchmarkProfilingData.init_profile)
  return _msg;
}
inline void BenchmarkProfilingData::set_allocated_init_profile(::tflite::profiling::ModelProfilingData* init_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.init_profile_;
  }
  if (init_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init_profile);
    if (message_arena != submessage_arena) {
      init_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_profile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.init_profile_ = init_profile;
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.BenchmarkProfilingData.init_profile)
}

// optional .tflite.profiling.ModelProfilingData runtime_profile = 3;
inline bool BenchmarkProfilingData::_internal_has_runtime_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.runtime_profile_ != nullptr);
  return value;
}
inline bool BenchmarkProfilingData::has_runtime_profile() const {
  return _internal_has_runtime_profile();
}
inline void BenchmarkProfilingData::clear_runtime_profile() {
  if (_impl_.runtime_profile_ != nullptr) _impl_.runtime_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::profiling::ModelProfilingData& BenchmarkProfilingData::_internal_runtime_profile() const {
  const ::tflite::profiling::ModelProfilingData* p = _impl_.runtime_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::profiling::ModelProfilingData&>(
      ::tflite::profiling::_ModelProfilingData_default_instance_);
}
inline const ::tflite::profiling::ModelProfilingData& BenchmarkProfilingData::runtime_profile() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.BenchmarkProfilingData.runtime_profile)
  return _internal_runtime_profile();
}
inline void BenchmarkProfilingData::unsafe_arena_set_allocated_runtime_profile(
    ::tflite::profiling::ModelProfilingData* runtime_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.runtime_profile_);
  }
  _impl_.runtime_profile_ = runtime_profile;
  if (runtime_profile) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.profiling.BenchmarkProfilingData.runtime_profile)
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::release_runtime_profile() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::profiling::ModelProfilingData* temp = _impl_.runtime_profile_;
  _impl_.runtime_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::unsafe_arena_release_runtime_profile() {
  // @@protoc_insertion_point(field_release:tflite.profiling.BenchmarkProfilingData.runtime_profile)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::profiling::ModelProfilingData* temp = _impl_.runtime_profile_;
  _impl_.runtime_profile_ = nullptr;
  return temp;
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::_internal_mutable_runtime_profile() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.runtime_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::profiling::ModelProfilingData>(GetArenaForAllocation());
    _impl_.runtime_profile_ = p;
  }
  return _impl_.runtime_profile_;
}
inline ::tflite::profiling::ModelProfilingData* BenchmarkProfilingData::mutable_runtime_profile() {
  ::tflite::profiling::ModelProfilingData* _msg = _internal_mutable_runtime_profile();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.BenchmarkProfilingData.runtime_profile)
  return _msg;
}
inline void BenchmarkProfilingData::set_allocated_runtime_profile(::tflite::profiling::ModelProfilingData* runtime_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.runtime_profile_;
  }
  if (runtime_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(runtime_profile);
    if (message_arena != submessage_arena) {
      runtime_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_profile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.runtime_profile_ = runtime_profile;
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.BenchmarkProfilingData.runtime_profile)
}

// -------------------------------------------------------------------

// ModelProfilingData

// repeated .tflite.profiling.SubGraphProfilingData subgraph_profiles = 1;
inline int ModelProfilingData::_internal_subgraph_profiles_size() const {
  return _impl_.subgraph_profiles_.size();
}
inline int ModelProfilingData::subgraph_profiles_size() const {
  return _internal_subgraph_profiles_size();
}
inline void ModelProfilingData::clear_subgraph_profiles() {
  _impl_.subgraph_profiles_.Clear();
}
inline ::tflite::profiling::SubGraphProfilingData* ModelProfilingData::mutable_subgraph_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.ModelProfilingData.subgraph_profiles)
  return _impl_.subgraph_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::SubGraphProfilingData >*
ModelProfilingData::mutable_subgraph_profiles() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.ModelProfilingData.subgraph_profiles)
  return &_impl_.subgraph_profiles_;
}
inline const ::tflite::profiling::SubGraphProfilingData& ModelProfilingData::_internal_subgraph_profiles(int index) const {
  return _impl_.subgraph_profiles_.Get(index);
}
inline const ::tflite::profiling::SubGraphProfilingData& ModelProfilingData::subgraph_profiles(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.ModelProfilingData.subgraph_profiles)
  return _internal_subgraph_profiles(index);
}
inline ::tflite::profiling::SubGraphProfilingData* ModelProfilingData::_internal_add_subgraph_profiles() {
  return _impl_.subgraph_profiles_.Add();
}
inline ::tflite::profiling::SubGraphProfilingData* ModelProfilingData::add_subgraph_profiles() {
  ::tflite::profiling::SubGraphProfilingData* _add = _internal_add_subgraph_profiles();
  // @@protoc_insertion_point(field_add:tflite.profiling.ModelProfilingData.subgraph_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::SubGraphProfilingData >&
ModelProfilingData::subgraph_profiles() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.ModelProfilingData.subgraph_profiles)
  return _impl_.subgraph_profiles_;
}

// repeated .tflite.profiling.DelegateProfilingData delegate_profiles = 2;
inline int ModelProfilingData::_internal_delegate_profiles_size() const {
  return _impl_.delegate_profiles_.size();
}
inline int ModelProfilingData::delegate_profiles_size() const {
  return _internal_delegate_profiles_size();
}
inline void ModelProfilingData::clear_delegate_profiles() {
  _impl_.delegate_profiles_.Clear();
}
inline ::tflite::profiling::DelegateProfilingData* ModelProfilingData::mutable_delegate_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.ModelProfilingData.delegate_profiles)
  return _impl_.delegate_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::DelegateProfilingData >*
ModelProfilingData::mutable_delegate_profiles() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.ModelProfilingData.delegate_profiles)
  return &_impl_.delegate_profiles_;
}
inline const ::tflite::profiling::DelegateProfilingData& ModelProfilingData::_internal_delegate_profiles(int index) const {
  return _impl_.delegate_profiles_.Get(index);
}
inline const ::tflite::profiling::DelegateProfilingData& ModelProfilingData::delegate_profiles(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.ModelProfilingData.delegate_profiles)
  return _internal_delegate_profiles(index);
}
inline ::tflite::profiling::DelegateProfilingData* ModelProfilingData::_internal_add_delegate_profiles() {
  return _impl_.delegate_profiles_.Add();
}
inline ::tflite::profiling::DelegateProfilingData* ModelProfilingData::add_delegate_profiles() {
  ::tflite::profiling::DelegateProfilingData* _add = _internal_add_delegate_profiles();
  // @@protoc_insertion_point(field_add:tflite.profiling.ModelProfilingData.delegate_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::DelegateProfilingData >&
ModelProfilingData::delegate_profiles() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.ModelProfilingData.delegate_profiles)
  return _impl_.delegate_profiles_;
}

// -------------------------------------------------------------------

// SubGraphProfilingData

// optional string subgraph_name = 1;
inline bool SubGraphProfilingData::_internal_has_subgraph_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubGraphProfilingData::has_subgraph_name() const {
  return _internal_has_subgraph_name();
}
inline void SubGraphProfilingData::clear_subgraph_name() {
  _impl_.subgraph_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubGraphProfilingData::subgraph_name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.SubGraphProfilingData.subgraph_name)
  return _internal_subgraph_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubGraphProfilingData::set_subgraph_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.subgraph_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.SubGraphProfilingData.subgraph_name)
}
inline std::string* SubGraphProfilingData::mutable_subgraph_name() {
  std::string* _s = _internal_mutable_subgraph_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.SubGraphProfilingData.subgraph_name)
  return _s;
}
inline const std::string& SubGraphProfilingData::_internal_subgraph_name() const {
  return _impl_.subgraph_name_.Get();
}
inline void SubGraphProfilingData::_internal_set_subgraph_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subgraph_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SubGraphProfilingData::_internal_mutable_subgraph_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subgraph_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SubGraphProfilingData::release_subgraph_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.SubGraphProfilingData.subgraph_name)
  if (!_internal_has_subgraph_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.subgraph_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subgraph_name_.IsDefault()) {
    _impl_.subgraph_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SubGraphProfilingData::set_allocated_subgraph_name(std::string* subgraph_name) {
  if (subgraph_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subgraph_name_.SetAllocated(subgraph_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subgraph_name_.IsDefault()) {
    _impl_.subgraph_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.SubGraphProfilingData.subgraph_name)
}

// optional int32 subgraph_index = 2;
inline bool SubGraphProfilingData::_internal_has_subgraph_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubGraphProfilingData::has_subgraph_index() const {
  return _internal_has_subgraph_index();
}
inline void SubGraphProfilingData::clear_subgraph_index() {
  _impl_.subgraph_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SubGraphProfilingData::_internal_subgraph_index() const {
  return _impl_.subgraph_index_;
}
inline int32_t SubGraphProfilingData::subgraph_index() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.SubGraphProfilingData.subgraph_index)
  return _internal_subgraph_index();
}
inline void SubGraphProfilingData::_internal_set_subgraph_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.subgraph_index_ = value;
}
inline void SubGraphProfilingData::set_subgraph_index(int32_t value) {
  _internal_set_subgraph_index(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.SubGraphProfilingData.subgraph_index)
}

// repeated .tflite.profiling.OpProfileData per_op_profiles = 3;
inline int SubGraphProfilingData::_internal_per_op_profiles_size() const {
  return _impl_.per_op_profiles_.size();
}
inline int SubGraphProfilingData::per_op_profiles_size() const {
  return _internal_per_op_profiles_size();
}
inline void SubGraphProfilingData::clear_per_op_profiles() {
  _impl_.per_op_profiles_.Clear();
}
inline ::tflite::profiling::OpProfileData* SubGraphProfilingData::mutable_per_op_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.SubGraphProfilingData.per_op_profiles)
  return _impl_.per_op_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >*
SubGraphProfilingData::mutable_per_op_profiles() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.SubGraphProfilingData.per_op_profiles)
  return &_impl_.per_op_profiles_;
}
inline const ::tflite::profiling::OpProfileData& SubGraphProfilingData::_internal_per_op_profiles(int index) const {
  return _impl_.per_op_profiles_.Get(index);
}
inline const ::tflite::profiling::OpProfileData& SubGraphProfilingData::per_op_profiles(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.SubGraphProfilingData.per_op_profiles)
  return _internal_per_op_profiles(index);
}
inline ::tflite::profiling::OpProfileData* SubGraphProfilingData::_internal_add_per_op_profiles() {
  return _impl_.per_op_profiles_.Add();
}
inline ::tflite::profiling::OpProfileData* SubGraphProfilingData::add_per_op_profiles() {
  ::tflite::profiling::OpProfileData* _add = _internal_add_per_op_profiles();
  // @@protoc_insertion_point(field_add:tflite.profiling.SubGraphProfilingData.per_op_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >&
SubGraphProfilingData::per_op_profiles() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.SubGraphProfilingData.per_op_profiles)
  return _impl_.per_op_profiles_;
}

// -------------------------------------------------------------------

// DelegateProfilingData

// optional string delegate_name = 1;
inline bool DelegateProfilingData::_internal_has_delegate_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelegateProfilingData::has_delegate_name() const {
  return _internal_has_delegate_name();
}
inline void DelegateProfilingData::clear_delegate_name() {
  _impl_.delegate_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DelegateProfilingData::delegate_name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.DelegateProfilingData.delegate_name)
  return _internal_delegate_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelegateProfilingData::set_delegate_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.delegate_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.DelegateProfilingData.delegate_name)
}
inline std::string* DelegateProfilingData::mutable_delegate_name() {
  std::string* _s = _internal_mutable_delegate_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.DelegateProfilingData.delegate_name)
  return _s;
}
inline const std::string& DelegateProfilingData::_internal_delegate_name() const {
  return _impl_.delegate_name_.Get();
}
inline void DelegateProfilingData::_internal_set_delegate_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delegate_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DelegateProfilingData::_internal_mutable_delegate_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.delegate_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DelegateProfilingData::release_delegate_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.DelegateProfilingData.delegate_name)
  if (!_internal_has_delegate_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.delegate_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delegate_name_.IsDefault()) {
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DelegateProfilingData::set_allocated_delegate_name(std::string* delegate_name) {
  if (delegate_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.delegate_name_.SetAllocated(delegate_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delegate_name_.IsDefault()) {
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.DelegateProfilingData.delegate_name)
}

// repeated .tflite.profiling.OpProfileData per_op_profiles = 2;
inline int DelegateProfilingData::_internal_per_op_profiles_size() const {
  return _impl_.per_op_profiles_.size();
}
inline int DelegateProfilingData::per_op_profiles_size() const {
  return _internal_per_op_profiles_size();
}
inline void DelegateProfilingData::clear_per_op_profiles() {
  _impl_.per_op_profiles_.Clear();
}
inline ::tflite::profiling::OpProfileData* DelegateProfilingData::mutable_per_op_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.DelegateProfilingData.per_op_profiles)
  return _impl_.per_op_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >*
DelegateProfilingData::mutable_per_op_profiles() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.DelegateProfilingData.per_op_profiles)
  return &_impl_.per_op_profiles_;
}
inline const ::tflite::profiling::OpProfileData& DelegateProfilingData::_internal_per_op_profiles(int index) const {
  return _impl_.per_op_profiles_.Get(index);
}
inline const ::tflite::profiling::OpProfileData& DelegateProfilingData::per_op_profiles(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.DelegateProfilingData.per_op_profiles)
  return _internal_per_op_profiles(index);
}
inline ::tflite::profiling::OpProfileData* DelegateProfilingData::_internal_add_per_op_profiles() {
  return _impl_.per_op_profiles_.Add();
}
inline ::tflite::profiling::OpProfileData* DelegateProfilingData::add_per_op_profiles() {
  ::tflite::profiling::OpProfileData* _add = _internal_add_per_op_profiles();
  // @@protoc_insertion_point(field_add:tflite.profiling.DelegateProfilingData.per_op_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::OpProfileData >&
DelegateProfilingData::per_op_profiles() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.DelegateProfilingData.per_op_profiles)
  return _impl_.per_op_profiles_;
}

// -------------------------------------------------------------------

// OpProfilingStat

// optional int64 first = 1;
inline bool OpProfilingStat::_internal_has_first() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpProfilingStat::has_first() const {
  return _internal_has_first();
}
inline void OpProfilingStat::clear_first() {
  _impl_.first_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t OpProfilingStat::_internal_first() const {
  return _impl_.first_;
}
inline int64_t OpProfilingStat::first() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.first)
  return _internal_first();
}
inline void OpProfilingStat::_internal_set_first(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.first_ = value;
}
inline void OpProfilingStat::set_first(int64_t value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.first)
}

// optional int64 last = 2;
inline bool OpProfilingStat::_internal_has_last() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpProfilingStat::has_last() const {
  return _internal_has_last();
}
inline void OpProfilingStat::clear_last() {
  _impl_.last_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t OpProfilingStat::_internal_last() const {
  return _impl_.last_;
}
inline int64_t OpProfilingStat::last() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.last)
  return _internal_last();
}
inline void OpProfilingStat::_internal_set_last(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.last_ = value;
}
inline void OpProfilingStat::set_last(int64_t value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.last)
}

// optional int64 avg = 3;
inline bool OpProfilingStat::_internal_has_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpProfilingStat::has_avg() const {
  return _internal_has_avg();
}
inline void OpProfilingStat::clear_avg() {
  _impl_.avg_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t OpProfilingStat::_internal_avg() const {
  return _impl_.avg_;
}
inline int64_t OpProfilingStat::avg() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.avg)
  return _internal_avg();
}
inline void OpProfilingStat::_internal_set_avg(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.avg_ = value;
}
inline void OpProfilingStat::set_avg(int64_t value) {
  _internal_set_avg(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.avg)
}

// optional float stddev = 4;
inline bool OpProfilingStat::_internal_has_stddev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpProfilingStat::has_stddev() const {
  return _internal_has_stddev();
}
inline void OpProfilingStat::clear_stddev() {
  _impl_.stddev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float OpProfilingStat::_internal_stddev() const {
  return _impl_.stddev_;
}
inline float OpProfilingStat::stddev() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.stddev)
  return _internal_stddev();
}
inline void OpProfilingStat::_internal_set_stddev(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stddev_ = value;
}
inline void OpProfilingStat::set_stddev(float value) {
  _internal_set_stddev(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.stddev)
}

// optional float variance = 5;
inline bool OpProfilingStat::_internal_has_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpProfilingStat::has_variance() const {
  return _internal_has_variance();
}
inline void OpProfilingStat::clear_variance() {
  _impl_.variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float OpProfilingStat::_internal_variance() const {
  return _impl_.variance_;
}
inline float OpProfilingStat::variance() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.variance)
  return _internal_variance();
}
inline void OpProfilingStat::_internal_set_variance(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.variance_ = value;
}
inline void OpProfilingStat::set_variance(float value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.variance)
}

// optional int64 min = 6;
inline bool OpProfilingStat::_internal_has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OpProfilingStat::has_min() const {
  return _internal_has_min();
}
inline void OpProfilingStat::clear_min() {
  _impl_.min_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t OpProfilingStat::_internal_min() const {
  return _impl_.min_;
}
inline int64_t OpProfilingStat::min() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.min)
  return _internal_min();
}
inline void OpProfilingStat::_internal_set_min(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.min_ = value;
}
inline void OpProfilingStat::set_min(int64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.min)
}

// optional int64 max = 7;
inline bool OpProfilingStat::_internal_has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OpProfilingStat::has_max() const {
  return _internal_has_max();
}
inline void OpProfilingStat::clear_max() {
  _impl_.max_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t OpProfilingStat::_internal_max() const {
  return _impl_.max_;
}
inline int64_t OpProfilingStat::max() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.max)
  return _internal_max();
}
inline void OpProfilingStat::_internal_set_max(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_ = value;
}
inline void OpProfilingStat::set_max(int64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.max)
}

// optional int64 sum = 8;
inline bool OpProfilingStat::_internal_has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OpProfilingStat::has_sum() const {
  return _internal_has_sum();
}
inline void OpProfilingStat::clear_sum() {
  _impl_.sum_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t OpProfilingStat::_internal_sum() const {
  return _impl_.sum_;
}
inline int64_t OpProfilingStat::sum() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.sum)
  return _internal_sum();
}
inline void OpProfilingStat::_internal_set_sum(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.sum_ = value;
}
inline void OpProfilingStat::set_sum(int64_t value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.sum)
}

// optional int64 count = 9;
inline bool OpProfilingStat::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OpProfilingStat::has_count() const {
  return _internal_has_count();
}
inline void OpProfilingStat::clear_count() {
  _impl_.count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t OpProfilingStat::_internal_count() const {
  return _impl_.count_;
}
inline int64_t OpProfilingStat::count() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfilingStat.count)
  return _internal_count();
}
inline void OpProfilingStat::_internal_set_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.count_ = value;
}
inline void OpProfilingStat::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfilingStat.count)
}

// -------------------------------------------------------------------

// OpProfileData

// optional string node_type = 1;
inline bool OpProfileData::_internal_has_node_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpProfileData::has_node_type() const {
  return _internal_has_node_type();
}
inline void OpProfileData::clear_node_type() {
  _impl_.node_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpProfileData::node_type() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfileData.node_type)
  return _internal_node_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpProfileData::set_node_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.node_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfileData.node_type)
}
inline std::string* OpProfileData::mutable_node_type() {
  std::string* _s = _internal_mutable_node_type();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.OpProfileData.node_type)
  return _s;
}
inline const std::string& OpProfileData::_internal_node_type() const {
  return _impl_.node_type_.Get();
}
inline void OpProfileData::_internal_set_node_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_type_.Set(value, GetArenaForAllocation());
}
inline std::string* OpProfileData::_internal_mutable_node_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.node_type_.Mutable(GetArenaForAllocation());
}
inline std::string* OpProfileData::release_node_type() {
  // @@protoc_insertion_point(field_release:tflite.profiling.OpProfileData.node_type)
  if (!_internal_has_node_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.node_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_type_.IsDefault()) {
    _impl_.node_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OpProfileData::set_allocated_node_type(std::string* node_type) {
  if (node_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.node_type_.SetAllocated(node_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_type_.IsDefault()) {
    _impl_.node_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.OpProfileData.node_type)
}

// optional .tflite.profiling.OpProfilingStat inference_microseconds = 2;
inline bool OpProfileData::_internal_has_inference_microseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inference_microseconds_ != nullptr);
  return value;
}
inline bool OpProfileData::has_inference_microseconds() const {
  return _internal_has_inference_microseconds();
}
inline void OpProfileData::clear_inference_microseconds() {
  if (_impl_.inference_microseconds_ != nullptr) _impl_.inference_microseconds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::profiling::OpProfilingStat& OpProfileData::_internal_inference_microseconds() const {
  const ::tflite::profiling::OpProfilingStat* p = _impl_.inference_microseconds_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::profiling::OpProfilingStat&>(
      ::tflite::profiling::_OpProfilingStat_default_instance_);
}
inline const ::tflite::profiling::OpProfilingStat& OpProfileData::inference_microseconds() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfileData.inference_microseconds)
  return _internal_inference_microseconds();
}
inline void OpProfileData::unsafe_arena_set_allocated_inference_microseconds(
    ::tflite::profiling::OpProfilingStat* inference_microseconds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inference_microseconds_);
  }
  _impl_.inference_microseconds_ = inference_microseconds;
  if (inference_microseconds) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.profiling.OpProfileData.inference_microseconds)
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::release_inference_microseconds() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::profiling::OpProfilingStat* temp = _impl_.inference_microseconds_;
  _impl_.inference_microseconds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::unsafe_arena_release_inference_microseconds() {
  // @@protoc_insertion_point(field_release:tflite.profiling.OpProfileData.inference_microseconds)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::profiling::OpProfilingStat* temp = _impl_.inference_microseconds_;
  _impl_.inference_microseconds_ = nullptr;
  return temp;
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::_internal_mutable_inference_microseconds() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inference_microseconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::profiling::OpProfilingStat>(GetArenaForAllocation());
    _impl_.inference_microseconds_ = p;
  }
  return _impl_.inference_microseconds_;
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::mutable_inference_microseconds() {
  ::tflite::profiling::OpProfilingStat* _msg = _internal_mutable_inference_microseconds();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.OpProfileData.inference_microseconds)
  return _msg;
}
inline void OpProfileData::set_allocated_inference_microseconds(::tflite::profiling::OpProfilingStat* inference_microseconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inference_microseconds_;
  }
  if (inference_microseconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inference_microseconds);
    if (message_arena != submessage_arena) {
      inference_microseconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inference_microseconds, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inference_microseconds_ = inference_microseconds;
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.OpProfileData.inference_microseconds)
}

// optional .tflite.profiling.OpProfilingStat mem_kb = 3;
inline bool OpProfileData::_internal_has_mem_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mem_kb_ != nullptr);
  return value;
}
inline bool OpProfileData::has_mem_kb() const {
  return _internal_has_mem_kb();
}
inline void OpProfileData::clear_mem_kb() {
  if (_impl_.mem_kb_ != nullptr) _impl_.mem_kb_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tflite::profiling::OpProfilingStat& OpProfileData::_internal_mem_kb() const {
  const ::tflite::profiling::OpProfilingStat* p = _impl_.mem_kb_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::profiling::OpProfilingStat&>(
      ::tflite::profiling::_OpProfilingStat_default_instance_);
}
inline const ::tflite::profiling::OpProfilingStat& OpProfileData::mem_kb() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfileData.mem_kb)
  return _internal_mem_kb();
}
inline void OpProfileData::unsafe_arena_set_allocated_mem_kb(
    ::tflite::profiling::OpProfilingStat* mem_kb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mem_kb_);
  }
  _impl_.mem_kb_ = mem_kb;
  if (mem_kb) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.profiling.OpProfileData.mem_kb)
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::release_mem_kb() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::profiling::OpProfilingStat* temp = _impl_.mem_kb_;
  _impl_.mem_kb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::unsafe_arena_release_mem_kb() {
  // @@protoc_insertion_point(field_release:tflite.profiling.OpProfileData.mem_kb)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::profiling::OpProfilingStat* temp = _impl_.mem_kb_;
  _impl_.mem_kb_ = nullptr;
  return temp;
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::_internal_mutable_mem_kb() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.mem_kb_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::profiling::OpProfilingStat>(GetArenaForAllocation());
    _impl_.mem_kb_ = p;
  }
  return _impl_.mem_kb_;
}
inline ::tflite::profiling::OpProfilingStat* OpProfileData::mutable_mem_kb() {
  ::tflite::profiling::OpProfilingStat* _msg = _internal_mutable_mem_kb();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.OpProfileData.mem_kb)
  return _msg;
}
inline void OpProfileData::set_allocated_mem_kb(::tflite::profiling::OpProfilingStat* mem_kb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mem_kb_;
  }
  if (mem_kb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mem_kb);
    if (message_arena != submessage_arena) {
      mem_kb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_kb, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.mem_kb_ = mem_kb;
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.OpProfileData.mem_kb)
}

// optional int64 times_called = 4;
inline bool OpProfileData::_internal_has_times_called() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpProfileData::has_times_called() const {
  return _internal_has_times_called();
}
inline void OpProfileData::clear_times_called() {
  _impl_.times_called_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t OpProfileData::_internal_times_called() const {
  return _impl_.times_called_;
}
inline int64_t OpProfileData::times_called() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfileData.times_called)
  return _internal_times_called();
}
inline void OpProfileData::_internal_set_times_called(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.times_called_ = value;
}
inline void OpProfileData::set_times_called(int64_t value) {
  _internal_set_times_called(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfileData.times_called)
}

// optional string name = 5;
inline bool OpProfileData::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpProfileData::has_name() const {
  return _internal_has_name();
}
inline void OpProfileData::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpProfileData::name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfileData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpProfileData::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfileData.name)
}
inline std::string* OpProfileData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.OpProfileData.name)
  return _s;
}
inline const std::string& OpProfileData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void OpProfileData::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* OpProfileData::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* OpProfileData::release_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.OpProfileData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OpProfileData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.OpProfileData.name)
}

// optional int64 run_order = 6;
inline bool OpProfileData::_internal_has_run_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OpProfileData::has_run_order() const {
  return _internal_has_run_order();
}
inline void OpProfileData::clear_run_order() {
  _impl_.run_order_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t OpProfileData::_internal_run_order() const {
  return _impl_.run_order_;
}
inline int64_t OpProfileData::run_order() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.OpProfileData.run_order)
  return _internal_run_order();
}
inline void OpProfileData::_internal_set_run_order(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.run_order_ = value;
}
inline void OpProfileData::set_run_order(int64_t value) {
  _internal_set_run_order(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.OpProfileData.run_order)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiling
}  // namespace tflite

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/profiling/proto/model_runtime_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/lite/profiling/proto/profiling_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
namespace tflite {
namespace profiling {
class DelegateNodeDetails;
struct DelegateNodeDetailsDefaultTypeInternal;
extern DelegateNodeDetailsDefaultTypeInternal _DelegateNodeDetails_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class ModelRuntimeDetails;
struct ModelRuntimeDetailsDefaultTypeInternal;
extern ModelRuntimeDetailsDefaultTypeInternal _ModelRuntimeDetails_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class RuntimeSubgraph;
struct RuntimeSubgraphDefaultTypeInternal;
extern RuntimeSubgraphDefaultTypeInternal _RuntimeSubgraph_default_instance_;
}  // namespace profiling
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::profiling::DelegateNodeDetails* Arena::CreateMaybeMessage<::tflite::profiling::DelegateNodeDetails>(Arena*);
template<> ::tflite::profiling::Edge* Arena::CreateMaybeMessage<::tflite::profiling::Edge>(Arena*);
template<> ::tflite::profiling::ModelRuntimeDetails* Arena::CreateMaybeMessage<::tflite::profiling::ModelRuntimeDetails>(Arena*);
template<> ::tflite::profiling::Node* Arena::CreateMaybeMessage<::tflite::profiling::Node>(Arena*);
template<> ::tflite::profiling::RuntimeSubgraph* Arena::CreateMaybeMessage<::tflite::profiling::RuntimeSubgraph>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace profiling {

enum RuntimeSubgraph_SubgraphType : int {
  RuntimeSubgraph_SubgraphType_UNKNOWN_SUBGRAPH = 0,
  RuntimeSubgraph_SubgraphType_TFLITE_SUBGRAPH = 1,
  RuntimeSubgraph_SubgraphType_DELEGATE_SUBGRAPH = 2
};
bool RuntimeSubgraph_SubgraphType_IsValid(int value);
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph_SubgraphType_SubgraphType_MIN = RuntimeSubgraph_SubgraphType_UNKNOWN_SUBGRAPH;
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph_SubgraphType_SubgraphType_MAX = RuntimeSubgraph_SubgraphType_DELEGATE_SUBGRAPH;
constexpr int RuntimeSubgraph_SubgraphType_SubgraphType_ARRAYSIZE = RuntimeSubgraph_SubgraphType_SubgraphType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeSubgraph_SubgraphType_descriptor();
template<typename T>
inline const std::string& RuntimeSubgraph_SubgraphType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RuntimeSubgraph_SubgraphType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RuntimeSubgraph_SubgraphType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RuntimeSubgraph_SubgraphType_descriptor(), enum_t_value);
}
inline bool RuntimeSubgraph_SubgraphType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RuntimeSubgraph_SubgraphType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RuntimeSubgraph_SubgraphType>(
    RuntimeSubgraph_SubgraphType_descriptor(), name, value);
}
enum Edge_DataType : int {
  Edge_DataType_UNKNOWN_TYPE = 0,
  Edge_DataType_FLOAT32 = 1,
  Edge_DataType_INT32 = 2,
  Edge_DataType_UINT8 = 3,
  Edge_DataType_INT64 = 4,
  Edge_DataType_STRING = 5,
  Edge_DataType_BOOL = 6,
  Edge_DataType_INT16 = 7,
  Edge_DataType_COMPLEX64 = 8,
  Edge_DataType_INT8 = 9,
  Edge_DataType_FLOAT16 = 10,
  Edge_DataType_FLOAT64 = 11,
  Edge_DataType_COMPLEX128 = 12,
  Edge_DataType_UINT64 = 13,
  Edge_DataType_RESOURCE = 14,
  Edge_DataType_VARIANT = 15,
  Edge_DataType_UINT32 = 16,
  Edge_DataType_UINT16 = 17,
  Edge_DataType_INT4 = 18,
  Edge_DataType_BFLOAT16 = 19
};
bool Edge_DataType_IsValid(int value);
constexpr Edge_DataType Edge_DataType_DataType_MIN = Edge_DataType_UNKNOWN_TYPE;
constexpr Edge_DataType Edge_DataType_DataType_MAX = Edge_DataType_BFLOAT16;
constexpr int Edge_DataType_DataType_ARRAYSIZE = Edge_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_DataType_descriptor();
template<typename T>
inline const std::string& Edge_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_DataType_descriptor(), enum_t_value);
}
inline bool Edge_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_DataType>(
    Edge_DataType_descriptor(), name, value);
}
enum Edge_LayoutType : int {
  Edge_LayoutType_UNKNOWN = 0,
  Edge_LayoutType_SCALAR = 1,
  Edge_LayoutType_LINEAR = 2,
  Edge_LayoutType_HW = 3,
  Edge_LayoutType_CHW = 4,
  Edge_LayoutType_HWC = 5,
  Edge_LayoutType_OIHW = 6,
  Edge_LayoutType_OHWI = 7,
  Edge_LayoutType_IHWO = 8,
  Edge_LayoutType_IOHW = 9,
  Edge_LayoutType_BHWC = 10,
  Edge_LayoutType_HWDC = 11,
  Edge_LayoutType_BHWDC = 12,
  Edge_LayoutType_HWD = 13,
  Edge_LayoutType_OHWDI = 14,
  Edge_LayoutType_HWIO = 15
};
bool Edge_LayoutType_IsValid(int value);
constexpr Edge_LayoutType Edge_LayoutType_LayoutType_MIN = Edge_LayoutType_UNKNOWN;
constexpr Edge_LayoutType Edge_LayoutType_LayoutType_MAX = Edge_LayoutType_HWIO;
constexpr int Edge_LayoutType_LayoutType_ARRAYSIZE = Edge_LayoutType_LayoutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_LayoutType_descriptor();
template<typename T>
inline const std::string& Edge_LayoutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_LayoutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_LayoutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_LayoutType_descriptor(), enum_t_value);
}
inline bool Edge_LayoutType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_LayoutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_LayoutType>(
    Edge_LayoutType_descriptor(), name, value);
}
// ===================================================================

class ModelRuntimeDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.ModelRuntimeDetails) */ {
 public:
  inline ModelRuntimeDetails() : ModelRuntimeDetails(nullptr) {}
  ~ModelRuntimeDetails() override;
  explicit PROTOBUF_CONSTEXPR ModelRuntimeDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelRuntimeDetails(const ModelRuntimeDetails& from);
  ModelRuntimeDetails(ModelRuntimeDetails&& from) noexcept
    : ModelRuntimeDetails() {
    *this = ::std::move(from);
  }

  inline ModelRuntimeDetails& operator=(const ModelRuntimeDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRuntimeDetails& operator=(ModelRuntimeDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelRuntimeDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelRuntimeDetails* internal_default_instance() {
    return reinterpret_cast<const ModelRuntimeDetails*>(
               &_ModelRuntimeDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelRuntimeDetails& a, ModelRuntimeDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelRuntimeDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRuntimeDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelRuntimeDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelRuntimeDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelRuntimeDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelRuntimeDetails& from) {
    ModelRuntimeDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRuntimeDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.ModelRuntimeDetails";
  }
  protected:
  explicit ModelRuntimeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubgraphsFieldNumber = 2,
    kModelNameFieldNumber = 1,
  };
  // repeated .tflite.profiling.RuntimeSubgraph subgraphs = 2;
  int subgraphs_size() const;
  private:
  int _internal_subgraphs_size() const;
  public:
  void clear_subgraphs();
  ::tflite::profiling::RuntimeSubgraph* mutable_subgraphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::RuntimeSubgraph >*
      mutable_subgraphs();
  private:
  const ::tflite::profiling::RuntimeSubgraph& _internal_subgraphs(int index) const;
  ::tflite::profiling::RuntimeSubgraph* _internal_add_subgraphs();
  public:
  const ::tflite::profiling::RuntimeSubgraph& subgraphs(int index) const;
  ::tflite::profiling::RuntimeSubgraph* add_subgraphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::RuntimeSubgraph >&
      subgraphs() const;

  // optional string model_name = 1;
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.ModelRuntimeDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::RuntimeSubgraph > subgraphs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
};
// -------------------------------------------------------------------

class RuntimeSubgraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.RuntimeSubgraph) */ {
 public:
  inline RuntimeSubgraph() : RuntimeSubgraph(nullptr) {}
  ~RuntimeSubgraph() override;
  explicit PROTOBUF_CONSTEXPR RuntimeSubgraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeSubgraph(const RuntimeSubgraph& from);
  RuntimeSubgraph(RuntimeSubgraph&& from) noexcept
    : RuntimeSubgraph() {
    *this = ::std::move(from);
  }

  inline RuntimeSubgraph& operator=(const RuntimeSubgraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeSubgraph& operator=(RuntimeSubgraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeSubgraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeSubgraph* internal_default_instance() {
    return reinterpret_cast<const RuntimeSubgraph*>(
               &_RuntimeSubgraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuntimeSubgraph& a, RuntimeSubgraph& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeSubgraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeSubgraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeSubgraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeSubgraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeSubgraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeSubgraph& from) {
    RuntimeSubgraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeSubgraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.RuntimeSubgraph";
  }
  protected:
  explicit RuntimeSubgraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RuntimeSubgraph_SubgraphType SubgraphType;
  static constexpr SubgraphType UNKNOWN_SUBGRAPH =
    RuntimeSubgraph_SubgraphType_UNKNOWN_SUBGRAPH;
  static constexpr SubgraphType TFLITE_SUBGRAPH =
    RuntimeSubgraph_SubgraphType_TFLITE_SUBGRAPH;
  static constexpr SubgraphType DELEGATE_SUBGRAPH =
    RuntimeSubgraph_SubgraphType_DELEGATE_SUBGRAPH;
  static inline bool SubgraphType_IsValid(int value) {
    return RuntimeSubgraph_SubgraphType_IsValid(value);
  }
  static constexpr SubgraphType SubgraphType_MIN =
    RuntimeSubgraph_SubgraphType_SubgraphType_MIN;
  static constexpr SubgraphType SubgraphType_MAX =
    RuntimeSubgraph_SubgraphType_SubgraphType_MAX;
  static constexpr int SubgraphType_ARRAYSIZE =
    RuntimeSubgraph_SubgraphType_SubgraphType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubgraphType_descriptor() {
    return RuntimeSubgraph_SubgraphType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubgraphType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubgraphType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubgraphType_Name.");
    return RuntimeSubgraph_SubgraphType_Name(enum_t_value);
  }
  static inline bool SubgraphType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubgraphType* value) {
    return RuntimeSubgraph_SubgraphType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 2,
    kNodesFieldNumber = 3,
    kExecutionPlanFieldNumber = 4,
    kNameFieldNumber = 6,
    kSubgraphIdFieldNumber = 1,
    kSubgraphTypeFieldNumber = 5,
  };
  // repeated .tflite.profiling.Edge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::tflite::profiling::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Edge >*
      mutable_edges();
  private:
  const ::tflite::profiling::Edge& _internal_edges(int index) const;
  ::tflite::profiling::Edge* _internal_add_edges();
  public:
  const ::tflite::profiling::Edge& edges(int index) const;
  ::tflite::profiling::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Edge >&
      edges() const;

  // repeated .tflite.profiling.Node nodes = 3;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::tflite::profiling::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Node >*
      mutable_nodes();
  private:
  const ::tflite::profiling::Node& _internal_nodes(int index) const;
  ::tflite::profiling::Node* _internal_add_nodes();
  public:
  const ::tflite::profiling::Node& nodes(int index) const;
  ::tflite::profiling::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Node >&
      nodes() const;

  // repeated int32 execution_plan = 4 [packed = true];
  int execution_plan_size() const;
  private:
  int _internal_execution_plan_size() const;
  public:
  void clear_execution_plan();
  private:
  int32_t _internal_execution_plan(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_execution_plan() const;
  void _internal_add_execution_plan(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_execution_plan();
  public:
  int32_t execution_plan(int index) const;
  void set_execution_plan(int index, int32_t value);
  void add_execution_plan(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      execution_plan() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_execution_plan();

  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 subgraph_id = 1;
  bool has_subgraph_id() const;
  private:
  bool _internal_has_subgraph_id() const;
  public:
  void clear_subgraph_id();
  int32_t subgraph_id() const;
  void set_subgraph_id(int32_t value);
  private:
  int32_t _internal_subgraph_id() const;
  void _internal_set_subgraph_id(int32_t value);
  public:

  // optional .tflite.profiling.RuntimeSubgraph.SubgraphType subgraph_type = 5;
  bool has_subgraph_type() const;
  private:
  bool _internal_has_subgraph_type() const;
  public:
  void clear_subgraph_type();
  ::tflite::profiling::RuntimeSubgraph_SubgraphType subgraph_type() const;
  void set_subgraph_type(::tflite::profiling::RuntimeSubgraph_SubgraphType value);
  private:
  ::tflite::profiling::RuntimeSubgraph_SubgraphType _internal_subgraph_type() const;
  void _internal_set_subgraph_type(::tflite::profiling::RuntimeSubgraph_SubgraphType value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.RuntimeSubgraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Node > nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > execution_plan_;
    mutable std::atomic<int> _execution_plan_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t subgraph_id_;
    int subgraph_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  enum NodeInfoCase {
    kDelegateNodeDetails = 8,
    kDelegatedToNodeId = 9,
    NODE_INFO_NOT_SET = 0,
  };

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 4,
    kOutputsFieldNumber = 5,
    kIntermediatesFieldNumber = 6,
    kTemporariesFieldNumber = 7,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kOpProfileDataFieldNumber = 10,
    kIdFieldNumber = 1,
    kDelegateNodeDetailsFieldNumber = 8,
    kDelegatedToNodeIdFieldNumber = 9,
  };
  // repeated int32 inputs = 4 [packed = true];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  private:
  int32_t _internal_inputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_inputs() const;
  void _internal_add_inputs(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_inputs();
  public:
  int32_t inputs(int index) const;
  void set_inputs(int index, int32_t value);
  void add_inputs(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_inputs();

  // repeated int32 outputs = 5 [packed = true];
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  private:
  int32_t _internal_outputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_outputs() const;
  void _internal_add_outputs(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_outputs();
  public:
  int32_t outputs(int index) const;
  void set_outputs(int index, int32_t value);
  void add_outputs(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_outputs();

  // repeated int32 intermediates = 6 [packed = true];
  int intermediates_size() const;
  private:
  int _internal_intermediates_size() const;
  public:
  void clear_intermediates();
  private:
  int32_t _internal_intermediates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_intermediates() const;
  void _internal_add_intermediates(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_intermediates();
  public:
  int32_t intermediates(int index) const;
  void set_intermediates(int index, int32_t value);
  void add_intermediates(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      intermediates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_intermediates();

  // repeated int32 temporaries = 7 [packed = true];
  int temporaries_size() const;
  private:
  int _internal_temporaries_size() const;
  public:
  void clear_temporaries();
  private:
  int32_t _internal_temporaries(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_temporaries() const;
  void _internal_add_temporaries(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_temporaries();
  public:
  int32_t temporaries(int index) const;
  void set_temporaries(int index, int32_t value);
  void add_temporaries(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      temporaries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_temporaries();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional .tflite.profiling.OpProfileData op_profile_data = 10;
  bool has_op_profile_data() const;
  private:
  bool _internal_has_op_profile_data() const;
  public:
  void clear_op_profile_data();
  const ::tflite::profiling::OpProfileData& op_profile_data() const;
  PROTOBUF_NODISCARD ::tflite::profiling::OpProfileData* release_op_profile_data();
  ::tflite::profiling::OpProfileData* mutable_op_profile_data();
  void set_allocated_op_profile_data(::tflite::profiling::OpProfileData* op_profile_data);
  private:
  const ::tflite::profiling::OpProfileData& _internal_op_profile_data() const;
  ::tflite::profiling::OpProfileData* _internal_mutable_op_profile_data();
  public:
  void unsafe_arena_set_allocated_op_profile_data(
      ::tflite::profiling::OpProfileData* op_profile_data);
  ::tflite::profiling::OpProfileData* unsafe_arena_release_op_profile_data();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .tflite.profiling.DelegateNodeDetails delegate_node_details = 8;
  bool has_delegate_node_details() const;
  private:
  bool _internal_has_delegate_node_details() const;
  public:
  void clear_delegate_node_details();
  const ::tflite::profiling::DelegateNodeDetails& delegate_node_details() const;
  PROTOBUF_NODISCARD ::tflite::profiling::DelegateNodeDetails* release_delegate_node_details();
  ::tflite::profiling::DelegateNodeDetails* mutable_delegate_node_details();
  void set_allocated_delegate_node_details(::tflite::profiling::DelegateNodeDetails* delegate_node_details);
  private:
  const ::tflite::profiling::DelegateNodeDetails& _internal_delegate_node_details() const;
  ::tflite::profiling::DelegateNodeDetails* _internal_mutable_delegate_node_details();
  public:
  void unsafe_arena_set_allocated_delegate_node_details(
      ::tflite::profiling::DelegateNodeDetails* delegate_node_details);
  ::tflite::profiling::DelegateNodeDetails* unsafe_arena_release_delegate_node_details();

  // int32 delegated_to_node_id = 9;
  bool has_delegated_to_node_id() const;
  private:
  bool _internal_has_delegated_to_node_id() const;
  public:
  void clear_delegated_to_node_id();
  int32_t delegated_to_node_id() const;
  void set_delegated_to_node_id(int32_t value);
  private:
  int32_t _internal_delegated_to_node_id() const;
  void _internal_set_delegated_to_node_id(int32_t value);
  public:

  void clear_node_info();
  NodeInfoCase node_info_case() const;
  // @@protoc_insertion_point(class_scope:tflite.profiling.Node)
 private:
  class _Internal;
  void set_has_delegate_node_details();
  void set_has_delegated_to_node_id();

  inline bool has_node_info() const;
  inline void clear_has_node_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > inputs_;
    mutable std::atomic<int> _inputs_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > outputs_;
    mutable std::atomic<int> _outputs_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > intermediates_;
    mutable std::atomic<int> _intermediates_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > temporaries_;
    mutable std::atomic<int> _temporaries_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::tflite::profiling::OpProfileData* op_profile_data_;
    int32_t id_;
    union NodeInfoUnion {
      constexpr NodeInfoUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tflite::profiling::DelegateNodeDetails* delegate_node_details_;
      int32_t delegated_to_node_id_;
    } node_info_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DelegateNodeDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.DelegateNodeDetails) */ {
 public:
  inline DelegateNodeDetails() : DelegateNodeDetails(nullptr) {}
  ~DelegateNodeDetails() override;
  explicit PROTOBUF_CONSTEXPR DelegateNodeDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelegateNodeDetails(const DelegateNodeDetails& from);
  DelegateNodeDetails(DelegateNodeDetails&& from) noexcept
    : DelegateNodeDetails() {
    *this = ::std::move(from);
  }

  inline DelegateNodeDetails& operator=(const DelegateNodeDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateNodeDetails& operator=(DelegateNodeDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelegateNodeDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelegateNodeDetails* internal_default_instance() {
    return reinterpret_cast<const DelegateNodeDetails*>(
               &_DelegateNodeDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DelegateNodeDetails& a, DelegateNodeDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateNodeDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateNodeDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelegateNodeDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelegateNodeDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelegateNodeDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelegateNodeDetails& from) {
    DelegateNodeDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateNodeDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.DelegateNodeDetails";
  }
  protected:
  explicit DelegateNodeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfliteNodeIdsReplacedFieldNumber = 2,
    kDelegateNameFieldNumber = 1,
  };
  // repeated int32 tflite_node_ids_replaced = 2 [packed = true];
  int tflite_node_ids_replaced_size() const;
  private:
  int _internal_tflite_node_ids_replaced_size() const;
  public:
  void clear_tflite_node_ids_replaced();
  private:
  int32_t _internal_tflite_node_ids_replaced(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_tflite_node_ids_replaced() const;
  void _internal_add_tflite_node_ids_replaced(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_tflite_node_ids_replaced();
  public:
  int32_t tflite_node_ids_replaced(int index) const;
  void set_tflite_node_ids_replaced(int index, int32_t value);
  void add_tflite_node_ids_replaced(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      tflite_node_ids_replaced() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_tflite_node_ids_replaced();

  // optional string delegate_name = 1;
  bool has_delegate_name() const;
  private:
  bool _internal_has_delegate_name() const;
  public:
  void clear_delegate_name();
  const std::string& delegate_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate_name();
  PROTOBUF_NODISCARD std::string* release_delegate_name();
  void set_allocated_delegate_name(std::string* delegate_name);
  private:
  const std::string& _internal_delegate_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate_name(const std::string& value);
  std::string* _internal_mutable_delegate_name();
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.DelegateNodeDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > tflite_node_ids_replaced_;
    mutable std::atomic<int> _tflite_node_ids_replaced_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.profiling.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.profiling.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Edge_DataType DataType;
  static constexpr DataType UNKNOWN_TYPE =
    Edge_DataType_UNKNOWN_TYPE;
  static constexpr DataType FLOAT32 =
    Edge_DataType_FLOAT32;
  static constexpr DataType INT32 =
    Edge_DataType_INT32;
  static constexpr DataType UINT8 =
    Edge_DataType_UINT8;
  static constexpr DataType INT64 =
    Edge_DataType_INT64;
  static constexpr DataType STRING =
    Edge_DataType_STRING;
  static constexpr DataType BOOL =
    Edge_DataType_BOOL;
  static constexpr DataType INT16 =
    Edge_DataType_INT16;
  static constexpr DataType COMPLEX64 =
    Edge_DataType_COMPLEX64;
  static constexpr DataType INT8 =
    Edge_DataType_INT8;
  static constexpr DataType FLOAT16 =
    Edge_DataType_FLOAT16;
  static constexpr DataType FLOAT64 =
    Edge_DataType_FLOAT64;
  static constexpr DataType COMPLEX128 =
    Edge_DataType_COMPLEX128;
  static constexpr DataType UINT64 =
    Edge_DataType_UINT64;
  static constexpr DataType RESOURCE =
    Edge_DataType_RESOURCE;
  static constexpr DataType VARIANT =
    Edge_DataType_VARIANT;
  static constexpr DataType UINT32 =
    Edge_DataType_UINT32;
  static constexpr DataType UINT16 =
    Edge_DataType_UINT16;
  static constexpr DataType INT4 =
    Edge_DataType_INT4;
  static constexpr DataType BFLOAT16 =
    Edge_DataType_BFLOAT16;
  static inline bool DataType_IsValid(int value) {
    return Edge_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    Edge_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    Edge_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    Edge_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return Edge_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return Edge_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return Edge_DataType_Parse(name, value);
  }

  typedef Edge_LayoutType LayoutType;
  static constexpr LayoutType UNKNOWN =
    Edge_LayoutType_UNKNOWN;
  static constexpr LayoutType SCALAR =
    Edge_LayoutType_SCALAR;
  static constexpr LayoutType LINEAR =
    Edge_LayoutType_LINEAR;
  static constexpr LayoutType HW =
    Edge_LayoutType_HW;
  static constexpr LayoutType CHW =
    Edge_LayoutType_CHW;
  static constexpr LayoutType HWC =
    Edge_LayoutType_HWC;
  static constexpr LayoutType OIHW =
    Edge_LayoutType_OIHW;
  static constexpr LayoutType OHWI =
    Edge_LayoutType_OHWI;
  static constexpr LayoutType IHWO =
    Edge_LayoutType_IHWO;
  static constexpr LayoutType IOHW =
    Edge_LayoutType_IOHW;
  static constexpr LayoutType BHWC =
    Edge_LayoutType_BHWC;
  static constexpr LayoutType HWDC =
    Edge_LayoutType_HWDC;
  static constexpr LayoutType BHWDC =
    Edge_LayoutType_BHWDC;
  static constexpr LayoutType HWD =
    Edge_LayoutType_HWD;
  static constexpr LayoutType OHWDI =
    Edge_LayoutType_OHWDI;
  static constexpr LayoutType HWIO =
    Edge_LayoutType_HWIO;
  static inline bool LayoutType_IsValid(int value) {
    return Edge_LayoutType_IsValid(value);
  }
  static constexpr LayoutType LayoutType_MIN =
    Edge_LayoutType_LayoutType_MIN;
  static constexpr LayoutType LayoutType_MAX =
    Edge_LayoutType_LayoutType_MAX;
  static constexpr int LayoutType_ARRAYSIZE =
    Edge_LayoutType_LayoutType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayoutType_descriptor() {
    return Edge_LayoutType_descriptor();
  }
  template<typename T>
  static inline const std::string& LayoutType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayoutType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayoutType_Name.");
    return Edge_LayoutType_Name(enum_t_value);
  }
  static inline bool LayoutType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LayoutType* value) {
    return Edge_LayoutType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kNameFieldNumber = 2,
    kAllocationTypeFieldNumber = 5,
    kIdFieldNumber = 1,
    kDataTypeFieldNumber = 3,
    kLayoutTypeFieldNumber = 6,
    kSizeFieldNumber = 7,
  };
  // repeated int32 shape = 4 [packed = true];
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  int32_t _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_shape() const;
  void _internal_add_shape(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_shape();
  public:
  int32_t shape(int index) const;
  void set_shape(int index, int32_t value);
  void add_shape(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_shape();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string allocation_type = 5;
  bool has_allocation_type() const;
  private:
  bool _internal_has_allocation_type() const;
  public:
  void clear_allocation_type();
  const std::string& allocation_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allocation_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allocation_type();
  PROTOBUF_NODISCARD std::string* release_allocation_type();
  void set_allocated_allocation_type(std::string* allocation_type);
  private:
  const std::string& _internal_allocation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allocation_type(const std::string& value);
  std::string* _internal_mutable_allocation_type();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .tflite.profiling.Edge.DataType data_type = 3;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::tflite::profiling::Edge_DataType data_type() const;
  void set_data_type(::tflite::profiling::Edge_DataType value);
  private:
  ::tflite::profiling::Edge_DataType _internal_data_type() const;
  void _internal_set_data_type(::tflite::profiling::Edge_DataType value);
  public:

  // optional .tflite.profiling.Edge.LayoutType layout_type = 6;
  bool has_layout_type() const;
  private:
  bool _internal_has_layout_type() const;
  public:
  void clear_layout_type();
  ::tflite::profiling::Edge_LayoutType layout_type() const;
  void set_layout_type(::tflite::profiling::Edge_LayoutType value);
  private:
  ::tflite::profiling::Edge_LayoutType _internal_layout_type() const;
  void _internal_set_layout_type(::tflite::profiling::Edge_LayoutType value);
  public:

  // optional int32 size = 7;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.profiling.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > shape_;
    mutable std::atomic<int> _shape_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allocation_type_;
    int32_t id_;
    int data_type_;
    int layout_type_;
    int32_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelRuntimeDetails

// optional string model_name = 1;
inline bool ModelRuntimeDetails::_internal_has_model_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelRuntimeDetails::has_model_name() const {
  return _internal_has_model_name();
}
inline void ModelRuntimeDetails::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelRuntimeDetails::model_name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.ModelRuntimeDetails.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelRuntimeDetails::set_model_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.ModelRuntimeDetails.model_name)
}
inline std::string* ModelRuntimeDetails::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.ModelRuntimeDetails.model_name)
  return _s;
}
inline const std::string& ModelRuntimeDetails::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void ModelRuntimeDetails::_internal_set_model_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelRuntimeDetails::_internal_mutable_model_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelRuntimeDetails::release_model_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.ModelRuntimeDetails.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelRuntimeDetails::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.ModelRuntimeDetails.model_name)
}

// repeated .tflite.profiling.RuntimeSubgraph subgraphs = 2;
inline int ModelRuntimeDetails::_internal_subgraphs_size() const {
  return _impl_.subgraphs_.size();
}
inline int ModelRuntimeDetails::subgraphs_size() const {
  return _internal_subgraphs_size();
}
inline void ModelRuntimeDetails::clear_subgraphs() {
  _impl_.subgraphs_.Clear();
}
inline ::tflite::profiling::RuntimeSubgraph* ModelRuntimeDetails::mutable_subgraphs(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.ModelRuntimeDetails.subgraphs)
  return _impl_.subgraphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::RuntimeSubgraph >*
ModelRuntimeDetails::mutable_subgraphs() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.ModelRuntimeDetails.subgraphs)
  return &_impl_.subgraphs_;
}
inline const ::tflite::profiling::RuntimeSubgraph& ModelRuntimeDetails::_internal_subgraphs(int index) const {
  return _impl_.subgraphs_.Get(index);
}
inline const ::tflite::profiling::RuntimeSubgraph& ModelRuntimeDetails::subgraphs(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.ModelRuntimeDetails.subgraphs)
  return _internal_subgraphs(index);
}
inline ::tflite::profiling::RuntimeSubgraph* ModelRuntimeDetails::_internal_add_subgraphs() {
  return _impl_.subgraphs_.Add();
}
inline ::tflite::profiling::RuntimeSubgraph* ModelRuntimeDetails::add_subgraphs() {
  ::tflite::profiling::RuntimeSubgraph* _add = _internal_add_subgraphs();
  // @@protoc_insertion_point(field_add:tflite.profiling.ModelRuntimeDetails.subgraphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::RuntimeSubgraph >&
ModelRuntimeDetails::subgraphs() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.ModelRuntimeDetails.subgraphs)
  return _impl_.subgraphs_;
}

// -------------------------------------------------------------------

// RuntimeSubgraph

// optional int32 subgraph_id = 1;
inline bool RuntimeSubgraph::_internal_has_subgraph_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuntimeSubgraph::has_subgraph_id() const {
  return _internal_has_subgraph_id();
}
inline void RuntimeSubgraph::clear_subgraph_id() {
  _impl_.subgraph_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RuntimeSubgraph::_internal_subgraph_id() const {
  return _impl_.subgraph_id_;
}
inline int32_t RuntimeSubgraph::subgraph_id() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.RuntimeSubgraph.subgraph_id)
  return _internal_subgraph_id();
}
inline void RuntimeSubgraph::_internal_set_subgraph_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.subgraph_id_ = value;
}
inline void RuntimeSubgraph::set_subgraph_id(int32_t value) {
  _internal_set_subgraph_id(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.RuntimeSubgraph.subgraph_id)
}

// repeated .tflite.profiling.Edge edges = 2;
inline int RuntimeSubgraph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int RuntimeSubgraph::edges_size() const {
  return _internal_edges_size();
}
inline void RuntimeSubgraph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::tflite::profiling::Edge* RuntimeSubgraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.RuntimeSubgraph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Edge >*
RuntimeSubgraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.RuntimeSubgraph.edges)
  return &_impl_.edges_;
}
inline const ::tflite::profiling::Edge& RuntimeSubgraph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::tflite::profiling::Edge& RuntimeSubgraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.RuntimeSubgraph.edges)
  return _internal_edges(index);
}
inline ::tflite::profiling::Edge* RuntimeSubgraph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::tflite::profiling::Edge* RuntimeSubgraph::add_edges() {
  ::tflite::profiling::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:tflite.profiling.RuntimeSubgraph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Edge >&
RuntimeSubgraph::edges() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.RuntimeSubgraph.edges)
  return _impl_.edges_;
}

// repeated .tflite.profiling.Node nodes = 3;
inline int RuntimeSubgraph::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int RuntimeSubgraph::nodes_size() const {
  return _internal_nodes_size();
}
inline void RuntimeSubgraph::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::tflite::profiling::Node* RuntimeSubgraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.profiling.RuntimeSubgraph.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Node >*
RuntimeSubgraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.RuntimeSubgraph.nodes)
  return &_impl_.nodes_;
}
inline const ::tflite::profiling::Node& RuntimeSubgraph::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::tflite::profiling::Node& RuntimeSubgraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.RuntimeSubgraph.nodes)
  return _internal_nodes(index);
}
inline ::tflite::profiling::Node* RuntimeSubgraph::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::tflite::profiling::Node* RuntimeSubgraph::add_nodes() {
  ::tflite::profiling::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:tflite.profiling.RuntimeSubgraph.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::profiling::Node >&
RuntimeSubgraph::nodes() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.RuntimeSubgraph.nodes)
  return _impl_.nodes_;
}

// repeated int32 execution_plan = 4 [packed = true];
inline int RuntimeSubgraph::_internal_execution_plan_size() const {
  return _impl_.execution_plan_.size();
}
inline int RuntimeSubgraph::execution_plan_size() const {
  return _internal_execution_plan_size();
}
inline void RuntimeSubgraph::clear_execution_plan() {
  _impl_.execution_plan_.Clear();
}
inline int32_t RuntimeSubgraph::_internal_execution_plan(int index) const {
  return _impl_.execution_plan_.Get(index);
}
inline int32_t RuntimeSubgraph::execution_plan(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.RuntimeSubgraph.execution_plan)
  return _internal_execution_plan(index);
}
inline void RuntimeSubgraph::set_execution_plan(int index, int32_t value) {
  _impl_.execution_plan_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.RuntimeSubgraph.execution_plan)
}
inline void RuntimeSubgraph::_internal_add_execution_plan(int32_t value) {
  _impl_.execution_plan_.Add(value);
}
inline void RuntimeSubgraph::add_execution_plan(int32_t value) {
  _internal_add_execution_plan(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.RuntimeSubgraph.execution_plan)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RuntimeSubgraph::_internal_execution_plan() const {
  return _impl_.execution_plan_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RuntimeSubgraph::execution_plan() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.RuntimeSubgraph.execution_plan)
  return _internal_execution_plan();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RuntimeSubgraph::_internal_mutable_execution_plan() {
  return &_impl_.execution_plan_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RuntimeSubgraph::mutable_execution_plan() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.RuntimeSubgraph.execution_plan)
  return _internal_mutable_execution_plan();
}

// optional .tflite.profiling.RuntimeSubgraph.SubgraphType subgraph_type = 5;
inline bool RuntimeSubgraph::_internal_has_subgraph_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RuntimeSubgraph::has_subgraph_type() const {
  return _internal_has_subgraph_type();
}
inline void RuntimeSubgraph::clear_subgraph_type() {
  _impl_.subgraph_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::tflite::profiling::RuntimeSubgraph_SubgraphType RuntimeSubgraph::_internal_subgraph_type() const {
  return static_cast< ::tflite::profiling::RuntimeSubgraph_SubgraphType >(_impl_.subgraph_type_);
}
inline ::tflite::profiling::RuntimeSubgraph_SubgraphType RuntimeSubgraph::subgraph_type() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.RuntimeSubgraph.subgraph_type)
  return _internal_subgraph_type();
}
inline void RuntimeSubgraph::_internal_set_subgraph_type(::tflite::profiling::RuntimeSubgraph_SubgraphType value) {
  assert(::tflite::profiling::RuntimeSubgraph_SubgraphType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.subgraph_type_ = value;
}
inline void RuntimeSubgraph::set_subgraph_type(::tflite::profiling::RuntimeSubgraph_SubgraphType value) {
  _internal_set_subgraph_type(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.RuntimeSubgraph.subgraph_type)
}

// optional string name = 6;
inline bool RuntimeSubgraph::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuntimeSubgraph::has_name() const {
  return _internal_has_name();
}
inline void RuntimeSubgraph::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RuntimeSubgraph::name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.RuntimeSubgraph.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeSubgraph::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.RuntimeSubgraph.name)
}
inline std::string* RuntimeSubgraph::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.RuntimeSubgraph.name)
  return _s;
}
inline const std::string& RuntimeSubgraph::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RuntimeSubgraph::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeSubgraph::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeSubgraph::release_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.RuntimeSubgraph.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RuntimeSubgraph::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.RuntimeSubgraph.name)
}

// -------------------------------------------------------------------

// Node

// optional int32 id = 1;
inline bool Node::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Node::has_id() const {
  return _internal_has_id();
}
inline void Node::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Node::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Node::id() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void Node::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.id)
}

// optional string name = 2;
inline bool Node::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_name() const {
  return _internal_has_name();
}
inline void Node::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.name)
}
inline std::string* Node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.Node.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.Node.name)
}

// optional string type = 3;
inline bool Node::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Node::has_type() const {
  return _internal_has_type();
}
inline void Node::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Node::type() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.type)
}
inline std::string* Node::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.Node.type)
  return _s;
}
inline const std::string& Node::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Node::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_type() {
  // @@protoc_insertion_point(field_release:tflite.profiling.Node.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.Node.type)
}

// repeated int32 inputs = 4 [packed = true];
inline int Node::_internal_inputs_size() const {
  return _impl_.inputs_.size();
}
inline int Node::inputs_size() const {
  return _internal_inputs_size();
}
inline void Node::clear_inputs() {
  _impl_.inputs_.Clear();
}
inline int32_t Node::_internal_inputs(int index) const {
  return _impl_.inputs_.Get(index);
}
inline int32_t Node::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.inputs)
  return _internal_inputs(index);
}
inline void Node::set_inputs(int index, int32_t value) {
  _impl_.inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.inputs)
}
inline void Node::_internal_add_inputs(int32_t value) {
  _impl_.inputs_.Add(value);
}
inline void Node::add_inputs(int32_t value) {
  _internal_add_inputs(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.Node.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_inputs() const {
  return _impl_.inputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::inputs() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.Node.inputs)
  return _internal_inputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_inputs() {
  return &_impl_.inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.Node.inputs)
  return _internal_mutable_inputs();
}

// repeated int32 outputs = 5 [packed = true];
inline int Node::_internal_outputs_size() const {
  return _impl_.outputs_.size();
}
inline int Node::outputs_size() const {
  return _internal_outputs_size();
}
inline void Node::clear_outputs() {
  _impl_.outputs_.Clear();
}
inline int32_t Node::_internal_outputs(int index) const {
  return _impl_.outputs_.Get(index);
}
inline int32_t Node::outputs(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.outputs)
  return _internal_outputs(index);
}
inline void Node::set_outputs(int index, int32_t value) {
  _impl_.outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.outputs)
}
inline void Node::_internal_add_outputs(int32_t value) {
  _impl_.outputs_.Add(value);
}
inline void Node::add_outputs(int32_t value) {
  _internal_add_outputs(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.Node.outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_outputs() const {
  return _impl_.outputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::outputs() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.Node.outputs)
  return _internal_outputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_outputs() {
  return &_impl_.outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.Node.outputs)
  return _internal_mutable_outputs();
}

// repeated int32 intermediates = 6 [packed = true];
inline int Node::_internal_intermediates_size() const {
  return _impl_.intermediates_.size();
}
inline int Node::intermediates_size() const {
  return _internal_intermediates_size();
}
inline void Node::clear_intermediates() {
  _impl_.intermediates_.Clear();
}
inline int32_t Node::_internal_intermediates(int index) const {
  return _impl_.intermediates_.Get(index);
}
inline int32_t Node::intermediates(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.intermediates)
  return _internal_intermediates(index);
}
inline void Node::set_intermediates(int index, int32_t value) {
  _impl_.intermediates_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.intermediates)
}
inline void Node::_internal_add_intermediates(int32_t value) {
  _impl_.intermediates_.Add(value);
}
inline void Node::add_intermediates(int32_t value) {
  _internal_add_intermediates(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.Node.intermediates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_intermediates() const {
  return _impl_.intermediates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::intermediates() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.Node.intermediates)
  return _internal_intermediates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_intermediates() {
  return &_impl_.intermediates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_intermediates() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.Node.intermediates)
  return _internal_mutable_intermediates();
}

// repeated int32 temporaries = 7 [packed = true];
inline int Node::_internal_temporaries_size() const {
  return _impl_.temporaries_.size();
}
inline int Node::temporaries_size() const {
  return _internal_temporaries_size();
}
inline void Node::clear_temporaries() {
  _impl_.temporaries_.Clear();
}
inline int32_t Node::_internal_temporaries(int index) const {
  return _impl_.temporaries_.Get(index);
}
inline int32_t Node::temporaries(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.temporaries)
  return _internal_temporaries(index);
}
inline void Node::set_temporaries(int index, int32_t value) {
  _impl_.temporaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.temporaries)
}
inline void Node::_internal_add_temporaries(int32_t value) {
  _impl_.temporaries_.Add(value);
}
inline void Node::add_temporaries(int32_t value) {
  _internal_add_temporaries(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.Node.temporaries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_temporaries() const {
  return _impl_.temporaries_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::temporaries() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.Node.temporaries)
  return _internal_temporaries();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_temporaries() {
  return &_impl_.temporaries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_temporaries() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.Node.temporaries)
  return _internal_mutable_temporaries();
}

// optional .tflite.profiling.OpProfileData op_profile_data = 10;
inline bool Node::_internal_has_op_profile_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.op_profile_data_ != nullptr);
  return value;
}
inline bool Node::has_op_profile_data() const {
  return _internal_has_op_profile_data();
}
inline const ::tflite::profiling::OpProfileData& Node::_internal_op_profile_data() const {
  const ::tflite::profiling::OpProfileData* p = _impl_.op_profile_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::profiling::OpProfileData&>(
      ::tflite::profiling::_OpProfileData_default_instance_);
}
inline const ::tflite::profiling::OpProfileData& Node::op_profile_data() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.op_profile_data)
  return _internal_op_profile_data();
}
inline void Node::unsafe_arena_set_allocated_op_profile_data(
    ::tflite::profiling::OpProfileData* op_profile_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_profile_data_);
  }
  _impl_.op_profile_data_ = op_profile_data;
  if (op_profile_data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.profiling.Node.op_profile_data)
}
inline ::tflite::profiling::OpProfileData* Node::release_op_profile_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::profiling::OpProfileData* temp = _impl_.op_profile_data_;
  _impl_.op_profile_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::profiling::OpProfileData* Node::unsafe_arena_release_op_profile_data() {
  // @@protoc_insertion_point(field_release:tflite.profiling.Node.op_profile_data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::profiling::OpProfileData* temp = _impl_.op_profile_data_;
  _impl_.op_profile_data_ = nullptr;
  return temp;
}
inline ::tflite::profiling::OpProfileData* Node::_internal_mutable_op_profile_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.op_profile_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::profiling::OpProfileData>(GetArenaForAllocation());
    _impl_.op_profile_data_ = p;
  }
  return _impl_.op_profile_data_;
}
inline ::tflite::profiling::OpProfileData* Node::mutable_op_profile_data() {
  ::tflite::profiling::OpProfileData* _msg = _internal_mutable_op_profile_data();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.Node.op_profile_data)
  return _msg;
}
inline void Node::set_allocated_op_profile_data(::tflite::profiling::OpProfileData* op_profile_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_profile_data_);
  }
  if (op_profile_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_profile_data));
    if (message_arena != submessage_arena) {
      op_profile_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_profile_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.op_profile_data_ = op_profile_data;
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.Node.op_profile_data)
}

// .tflite.profiling.DelegateNodeDetails delegate_node_details = 8;
inline bool Node::_internal_has_delegate_node_details() const {
  return node_info_case() == kDelegateNodeDetails;
}
inline bool Node::has_delegate_node_details() const {
  return _internal_has_delegate_node_details();
}
inline void Node::set_has_delegate_node_details() {
  _impl_._oneof_case_[0] = kDelegateNodeDetails;
}
inline void Node::clear_delegate_node_details() {
  if (_internal_has_delegate_node_details()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_info_.delegate_node_details_;
    }
    clear_has_node_info();
  }
}
inline ::tflite::profiling::DelegateNodeDetails* Node::release_delegate_node_details() {
  // @@protoc_insertion_point(field_release:tflite.profiling.Node.delegate_node_details)
  if (_internal_has_delegate_node_details()) {
    clear_has_node_info();
    ::tflite::profiling::DelegateNodeDetails* temp = _impl_.node_info_.delegate_node_details_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_info_.delegate_node_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::profiling::DelegateNodeDetails& Node::_internal_delegate_node_details() const {
  return _internal_has_delegate_node_details()
      ? *_impl_.node_info_.delegate_node_details_
      : reinterpret_cast< ::tflite::profiling::DelegateNodeDetails&>(::tflite::profiling::_DelegateNodeDetails_default_instance_);
}
inline const ::tflite::profiling::DelegateNodeDetails& Node::delegate_node_details() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.delegate_node_details)
  return _internal_delegate_node_details();
}
inline ::tflite::profiling::DelegateNodeDetails* Node::unsafe_arena_release_delegate_node_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.profiling.Node.delegate_node_details)
  if (_internal_has_delegate_node_details()) {
    clear_has_node_info();
    ::tflite::profiling::DelegateNodeDetails* temp = _impl_.node_info_.delegate_node_details_;
    _impl_.node_info_.delegate_node_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_delegate_node_details(::tflite::profiling::DelegateNodeDetails* delegate_node_details) {
  clear_node_info();
  if (delegate_node_details) {
    set_has_delegate_node_details();
    _impl_.node_info_.delegate_node_details_ = delegate_node_details;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.profiling.Node.delegate_node_details)
}
inline ::tflite::profiling::DelegateNodeDetails* Node::_internal_mutable_delegate_node_details() {
  if (!_internal_has_delegate_node_details()) {
    clear_node_info();
    set_has_delegate_node_details();
    _impl_.node_info_.delegate_node_details_ = CreateMaybeMessage< ::tflite::profiling::DelegateNodeDetails >(GetArenaForAllocation());
  }
  return _impl_.node_info_.delegate_node_details_;
}
inline ::tflite::profiling::DelegateNodeDetails* Node::mutable_delegate_node_details() {
  ::tflite::profiling::DelegateNodeDetails* _msg = _internal_mutable_delegate_node_details();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.Node.delegate_node_details)
  return _msg;
}

// int32 delegated_to_node_id = 9;
inline bool Node::_internal_has_delegated_to_node_id() const {
  return node_info_case() == kDelegatedToNodeId;
}
inline bool Node::has_delegated_to_node_id() const {
  return _internal_has_delegated_to_node_id();
}
inline void Node::set_has_delegated_to_node_id() {
  _impl_._oneof_case_[0] = kDelegatedToNodeId;
}
inline void Node::clear_delegated_to_node_id() {
  if (_internal_has_delegated_to_node_id()) {
    _impl_.node_info_.delegated_to_node_id_ = 0;
    clear_has_node_info();
  }
}
inline int32_t Node::_internal_delegated_to_node_id() const {
  if (_internal_has_delegated_to_node_id()) {
    return _impl_.node_info_.delegated_to_node_id_;
  }
  return 0;
}
inline void Node::_internal_set_delegated_to_node_id(int32_t value) {
  if (!_internal_has_delegated_to_node_id()) {
    clear_node_info();
    set_has_delegated_to_node_id();
  }
  _impl_.node_info_.delegated_to_node_id_ = value;
}
inline int32_t Node::delegated_to_node_id() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Node.delegated_to_node_id)
  return _internal_delegated_to_node_id();
}
inline void Node::set_delegated_to_node_id(int32_t value) {
  _internal_set_delegated_to_node_id(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Node.delegated_to_node_id)
}

inline bool Node::has_node_info() const {
  return node_info_case() != NODE_INFO_NOT_SET;
}
inline void Node::clear_has_node_info() {
  _impl_._oneof_case_[0] = NODE_INFO_NOT_SET;
}
inline Node::NodeInfoCase Node::node_info_case() const {
  return Node::NodeInfoCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DelegateNodeDetails

// optional string delegate_name = 1;
inline bool DelegateNodeDetails::_internal_has_delegate_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelegateNodeDetails::has_delegate_name() const {
  return _internal_has_delegate_name();
}
inline void DelegateNodeDetails::clear_delegate_name() {
  _impl_.delegate_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DelegateNodeDetails::delegate_name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.DelegateNodeDetails.delegate_name)
  return _internal_delegate_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelegateNodeDetails::set_delegate_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.delegate_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.DelegateNodeDetails.delegate_name)
}
inline std::string* DelegateNodeDetails::mutable_delegate_name() {
  std::string* _s = _internal_mutable_delegate_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.DelegateNodeDetails.delegate_name)
  return _s;
}
inline const std::string& DelegateNodeDetails::_internal_delegate_name() const {
  return _impl_.delegate_name_.Get();
}
inline void DelegateNodeDetails::_internal_set_delegate_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delegate_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DelegateNodeDetails::_internal_mutable_delegate_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.delegate_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DelegateNodeDetails::release_delegate_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.DelegateNodeDetails.delegate_name)
  if (!_internal_has_delegate_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.delegate_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delegate_name_.IsDefault()) {
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DelegateNodeDetails::set_allocated_delegate_name(std::string* delegate_name) {
  if (delegate_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.delegate_name_.SetAllocated(delegate_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delegate_name_.IsDefault()) {
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.DelegateNodeDetails.delegate_name)
}

// repeated int32 tflite_node_ids_replaced = 2 [packed = true];
inline int DelegateNodeDetails::_internal_tflite_node_ids_replaced_size() const {
  return _impl_.tflite_node_ids_replaced_.size();
}
inline int DelegateNodeDetails::tflite_node_ids_replaced_size() const {
  return _internal_tflite_node_ids_replaced_size();
}
inline void DelegateNodeDetails::clear_tflite_node_ids_replaced() {
  _impl_.tflite_node_ids_replaced_.Clear();
}
inline int32_t DelegateNodeDetails::_internal_tflite_node_ids_replaced(int index) const {
  return _impl_.tflite_node_ids_replaced_.Get(index);
}
inline int32_t DelegateNodeDetails::tflite_node_ids_replaced(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.DelegateNodeDetails.tflite_node_ids_replaced)
  return _internal_tflite_node_ids_replaced(index);
}
inline void DelegateNodeDetails::set_tflite_node_ids_replaced(int index, int32_t value) {
  _impl_.tflite_node_ids_replaced_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.DelegateNodeDetails.tflite_node_ids_replaced)
}
inline void DelegateNodeDetails::_internal_add_tflite_node_ids_replaced(int32_t value) {
  _impl_.tflite_node_ids_replaced_.Add(value);
}
inline void DelegateNodeDetails::add_tflite_node_ids_replaced(int32_t value) {
  _internal_add_tflite_node_ids_replaced(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.DelegateNodeDetails.tflite_node_ids_replaced)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DelegateNodeDetails::_internal_tflite_node_ids_replaced() const {
  return _impl_.tflite_node_ids_replaced_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DelegateNodeDetails::tflite_node_ids_replaced() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.DelegateNodeDetails.tflite_node_ids_replaced)
  return _internal_tflite_node_ids_replaced();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DelegateNodeDetails::_internal_mutable_tflite_node_ids_replaced() {
  return &_impl_.tflite_node_ids_replaced_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DelegateNodeDetails::mutable_tflite_node_ids_replaced() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.DelegateNodeDetails.tflite_node_ids_replaced)
  return _internal_mutable_tflite_node_ids_replaced();
}

// -------------------------------------------------------------------

// Edge

// optional int32 id = 1;
inline bool Edge::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Edge::has_id() const {
  return _internal_has_id();
}
inline void Edge::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Edge::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Edge::id() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.id)
  return _internal_id();
}
inline void Edge::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void Edge::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.id)
}

// optional string name = 2;
inline bool Edge::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Edge::has_name() const {
  return _internal_has_name();
}
inline void Edge::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Edge::name() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.name)
}
inline std::string* Edge::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.Edge.name)
  return _s;
}
inline const std::string& Edge::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Edge::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge::release_name() {
  // @@protoc_insertion_point(field_release:tflite.profiling.Edge.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Edge::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.Edge.name)
}

// optional .tflite.profiling.Edge.DataType data_type = 3;
inline bool Edge::_internal_has_data_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Edge::has_data_type() const {
  return _internal_has_data_type();
}
inline void Edge::clear_data_type() {
  _impl_.data_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tflite::profiling::Edge_DataType Edge::_internal_data_type() const {
  return static_cast< ::tflite::profiling::Edge_DataType >(_impl_.data_type_);
}
inline ::tflite::profiling::Edge_DataType Edge::data_type() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.data_type)
  return _internal_data_type();
}
inline void Edge::_internal_set_data_type(::tflite::profiling::Edge_DataType value) {
  assert(::tflite::profiling::Edge_DataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_type_ = value;
}
inline void Edge::set_data_type(::tflite::profiling::Edge_DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.data_type)
}

// repeated int32 shape = 4 [packed = true];
inline int Edge::_internal_shape_size() const {
  return _impl_.shape_.size();
}
inline int Edge::shape_size() const {
  return _internal_shape_size();
}
inline void Edge::clear_shape() {
  _impl_.shape_.Clear();
}
inline int32_t Edge::_internal_shape(int index) const {
  return _impl_.shape_.Get(index);
}
inline int32_t Edge::shape(int index) const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.shape)
  return _internal_shape(index);
}
inline void Edge::set_shape(int index, int32_t value) {
  _impl_.shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.shape)
}
inline void Edge::_internal_add_shape(int32_t value) {
  _impl_.shape_.Add(value);
}
inline void Edge::add_shape(int32_t value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:tflite.profiling.Edge.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Edge::_internal_shape() const {
  return _impl_.shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Edge::shape() const {
  // @@protoc_insertion_point(field_list:tflite.profiling.Edge.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Edge::_internal_mutable_shape() {
  return &_impl_.shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Edge::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tflite.profiling.Edge.shape)
  return _internal_mutable_shape();
}

// optional string allocation_type = 5;
inline bool Edge::_internal_has_allocation_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Edge::has_allocation_type() const {
  return _internal_has_allocation_type();
}
inline void Edge::clear_allocation_type() {
  _impl_.allocation_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Edge::allocation_type() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.allocation_type)
  return _internal_allocation_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge::set_allocation_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.allocation_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.allocation_type)
}
inline std::string* Edge::mutable_allocation_type() {
  std::string* _s = _internal_mutable_allocation_type();
  // @@protoc_insertion_point(field_mutable:tflite.profiling.Edge.allocation_type)
  return _s;
}
inline const std::string& Edge::_internal_allocation_type() const {
  return _impl_.allocation_type_.Get();
}
inline void Edge::_internal_set_allocation_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allocation_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_allocation_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.allocation_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge::release_allocation_type() {
  // @@protoc_insertion_point(field_release:tflite.profiling.Edge.allocation_type)
  if (!_internal_has_allocation_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.allocation_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.allocation_type_.IsDefault()) {
    _impl_.allocation_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Edge::set_allocated_allocation_type(std::string* allocation_type) {
  if (allocation_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.allocation_type_.SetAllocated(allocation_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.allocation_type_.IsDefault()) {
    _impl_.allocation_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.Edge.allocation_type)
}

// optional .tflite.profiling.Edge.LayoutType layout_type = 6;
inline bool Edge::_internal_has_layout_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Edge::has_layout_type() const {
  return _internal_has_layout_type();
}
inline void Edge::clear_layout_type() {
  _impl_.layout_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tflite::profiling::Edge_LayoutType Edge::_internal_layout_type() const {
  return static_cast< ::tflite::profiling::Edge_LayoutType >(_impl_.layout_type_);
}
inline ::tflite::profiling::Edge_LayoutType Edge::layout_type() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.layout_type)
  return _internal_layout_type();
}
inline void Edge::_internal_set_layout_type(::tflite::profiling::Edge_LayoutType value) {
  assert(::tflite::profiling::Edge_LayoutType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.layout_type_ = value;
}
inline void Edge::set_layout_type(::tflite::profiling::Edge_LayoutType value) {
  _internal_set_layout_type(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.layout_type)
}

// optional int32 size = 7;
inline bool Edge::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Edge::has_size() const {
  return _internal_has_size();
}
inline void Edge::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Edge::_internal_size() const {
  return _impl_.size_;
}
inline int32_t Edge::size() const {
  // @@protoc_insertion_point(field_get:tflite.profiling.Edge.size)
  return _internal_size();
}
inline void Edge::_internal_set_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.size_ = value;
}
inline void Edge::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tflite.profiling.Edge.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiling
}  // namespace tflite

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tflite::profiling::RuntimeSubgraph_SubgraphType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::profiling::RuntimeSubgraph_SubgraphType>() {
  return ::tflite::profiling::RuntimeSubgraph_SubgraphType_descriptor();
}
template <> struct is_proto_enum< ::tflite::profiling::Edge_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::profiling::Edge_DataType>() {
  return ::tflite::profiling::Edge_DataType_descriptor();
}
template <> struct is_proto_enum< ::tflite::profiling::Edge_LayoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::profiling::Edge_LayoutType>() {
  return ::tflite::profiling::Edge_LayoutType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto

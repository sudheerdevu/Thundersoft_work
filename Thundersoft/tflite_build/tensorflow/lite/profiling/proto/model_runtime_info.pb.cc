// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/profiling/proto/model_runtime_info.proto

#include "tensorflow/lite/profiling/proto/model_runtime_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tflite {
namespace profiling {
PROTOBUF_CONSTEXPR ModelRuntimeDetails::ModelRuntimeDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subgraphs_)*/{}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ModelRuntimeDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelRuntimeDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelRuntimeDetailsDefaultTypeInternal() {}
  union {
    ModelRuntimeDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelRuntimeDetailsDefaultTypeInternal _ModelRuntimeDetails_default_instance_;
PROTOBUF_CONSTEXPR RuntimeSubgraph::RuntimeSubgraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.execution_plan_)*/{}
  , /*decltype(_impl_._execution_plan_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subgraph_id_)*/0
  , /*decltype(_impl_.subgraph_type_)*/0} {}
struct RuntimeSubgraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuntimeSubgraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuntimeSubgraphDefaultTypeInternal() {}
  union {
    RuntimeSubgraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuntimeSubgraphDefaultTypeInternal _RuntimeSubgraph_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_._inputs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.outputs_)*/{}
  , /*decltype(_impl_._outputs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.intermediates_)*/{}
  , /*decltype(_impl_._intermediates_cached_byte_size_)*/{0}
  , /*decltype(_impl_.temporaries_)*/{}
  , /*decltype(_impl_._temporaries_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_profile_data_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.node_info_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR DelegateNodeDetails::DelegateNodeDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tflite_node_ids_replaced_)*/{}
  , /*decltype(_impl_._tflite_node_ids_replaced_cached_byte_size_)*/{0}
  , /*decltype(_impl_.delegate_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DelegateNodeDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegateNodeDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegateNodeDetailsDefaultTypeInternal() {}
  union {
    DelegateNodeDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegateNodeDetailsDefaultTypeInternal _DelegateNodeDetails_default_instance_;
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allocation_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.data_type_)*/0
  , /*decltype(_impl_.layout_type_)*/0
  , /*decltype(_impl_.size_)*/0} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
}  // namespace profiling
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelRuntimeDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelRuntimeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelRuntimeDetails, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelRuntimeDetails, _impl_.subgraphs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_.subgraph_id_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_.edges_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_.execution_plan_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_.subgraph_type_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::RuntimeSubgraph, _impl_.name_),
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.outputs_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.intermediates_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.temporaries_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.op_profile_data_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Node, _impl_.node_info_),
  3,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateNodeDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateNodeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateNodeDetails, _impl_.delegate_name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateNodeDetails, _impl_.tflite_node_ids_replaced_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.data_type_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.allocation_type_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.layout_type_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::Edge, _impl_.size_),
  2,
  0,
  3,
  ~0u,
  1,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tflite::profiling::ModelRuntimeDetails)},
  { 10, 22, -1, sizeof(::tflite::profiling::RuntimeSubgraph)},
  { 28, 45, -1, sizeof(::tflite::profiling::Node)},
  { 55, 63, -1, sizeof(::tflite::profiling::DelegateNodeDetails)},
  { 65, 78, -1, sizeof(::tflite::profiling::Edge)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tflite::profiling::_ModelRuntimeDetails_default_instance_._instance,
  &::tflite::profiling::_RuntimeSubgraph_default_instance_._instance,
  &::tflite::profiling::_Node_default_instance_._instance,
  &::tflite::profiling::_DelegateNodeDetails_default_instance_._instance,
  &::tflite::profiling::_Edge_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8tensorflow/lite/profiling/proto/model_"
  "runtime_info.proto\022\020tflite.profiling\0324te"
  "nsorflow/lite/profiling/proto/profiling_"
  "info.proto\"_\n\023ModelRuntimeDetails\022\022\n\nmod"
  "el_name\030\001 \001(\t\0224\n\tsubgraphs\030\002 \003(\0132!.tflit"
  "e.profiling.RuntimeSubgraph\"\267\002\n\017RuntimeS"
  "ubgraph\022\023\n\013subgraph_id\030\001 \001(\005\022%\n\005edges\030\002 "
  "\003(\0132\026.tflite.profiling.Edge\022%\n\005nodes\030\003 \003"
  "(\0132\026.tflite.profiling.Node\022\032\n\016execution_"
  "plan\030\004 \003(\005B\002\020\001\022E\n\rsubgraph_type\030\005 \001(\0162.."
  "tflite.profiling.RuntimeSubgraph.Subgrap"
  "hType\022\014\n\004name\030\006 \001(\t\"P\n\014SubgraphType\022\024\n\020U"
  "NKNOWN_SUBGRAPH\020\000\022\023\n\017TFLITE_SUBGRAPH\020\001\022\025"
  "\n\021DELEGATE_SUBGRAPH\020\002\"\272\002\n\004Node\022\n\n\002id\030\001 \001"
  "(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\022\022\n\006inputs"
  "\030\004 \003(\005B\002\020\001\022\023\n\007outputs\030\005 \003(\005B\002\020\001\022\031\n\rinter"
  "mediates\030\006 \003(\005B\002\020\001\022\027\n\013temporaries\030\007 \003(\005B"
  "\002\020\001\0228\n\017op_profile_data\030\n \001(\0132\037.tflite.pr"
  "ofiling.OpProfileData\022F\n\025delegate_node_d"
  "etails\030\010 \001(\0132%.tflite.profiling.Delegate"
  "NodeDetailsH\000\022\036\n\024delegated_to_node_id\030\t "
  "\001(\005H\000B\013\n\tnode_info\"R\n\023DelegateNodeDetail"
  "s\022\025\n\rdelegate_name\030\001 \001(\t\022$\n\030tflite_node_"
  "ids_replaced\030\002 \003(\005B\002\020\001\"\201\005\n\004Edge\022\n\n\002id\030\001 "
  "\001(\005\022\014\n\004name\030\002 \001(\t\0222\n\tdata_type\030\003 \001(\0162\037.t"
  "flite.profiling.Edge.DataType\022\021\n\005shape\030\004"
  " \003(\005B\002\020\001\022\027\n\017allocation_type\030\005 \001(\t\0226\n\013lay"
  "out_type\030\006 \001(\0162!.tflite.profiling.Edge.L"
  "ayoutType\022\014\n\004size\030\007 \001(\005\"\205\002\n\010DataType\022\020\n\014"
  "UNKNOWN_TYPE\020\000\022\013\n\007FLOAT32\020\001\022\t\n\005INT32\020\002\022\t"
  "\n\005UINT8\020\003\022\t\n\005INT64\020\004\022\n\n\006STRING\020\005\022\010\n\004BOOL"
  "\020\006\022\t\n\005INT16\020\007\022\r\n\tCOMPLEX64\020\010\022\010\n\004INT8\020\t\022\013"
  "\n\007FLOAT16\020\n\022\013\n\007FLOAT64\020\013\022\016\n\nCOMPLEX128\020\014"
  "\022\n\n\006UINT64\020\r\022\014\n\010RESOURCE\020\016\022\013\n\007VARIANT\020\017\022"
  "\n\n\006UINT32\020\020\022\n\n\006UINT16\020\021\022\010\n\004INT4\020\022\022\014\n\010BFL"
  "OAT16\020\023\"\260\001\n\nLayoutType\022\013\n\007UNKNOWN\020\000\022\n\n\006S"
  "CALAR\020\001\022\n\n\006LINEAR\020\002\022\006\n\002HW\020\003\022\007\n\003CHW\020\004\022\007\n\003"
  "HWC\020\005\022\010\n\004OIHW\020\006\022\010\n\004OHWI\020\007\022\010\n\004IHWO\020\010\022\010\n\004I"
  "OHW\020\t\022\010\n\004BHWC\020\n\022\010\n\004HWDC\020\013\022\t\n\005BHWDC\020\014\022\007\n\003"
  "HWD\020\r\022\t\n\005OHWDI\020\016\022\010\n\004HWIO\020\017B\002P\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto = {
    false, false, 1590, descriptor_table_protodef_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto,
    "tensorflow/lite/profiling/proto/model_runtime_info.proto",
    &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once, descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto::offsets,
    file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto, file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto,
    file_level_service_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_getter() {
  return &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto(&descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto);
namespace tflite {
namespace profiling {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeSubgraph_SubgraphType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[0];
}
bool RuntimeSubgraph_SubgraphType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph::UNKNOWN_SUBGRAPH;
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph::TFLITE_SUBGRAPH;
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph::DELEGATE_SUBGRAPH;
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph::SubgraphType_MIN;
constexpr RuntimeSubgraph_SubgraphType RuntimeSubgraph::SubgraphType_MAX;
constexpr int RuntimeSubgraph::SubgraphType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[1];
}
bool Edge_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Edge_DataType Edge::UNKNOWN_TYPE;
constexpr Edge_DataType Edge::FLOAT32;
constexpr Edge_DataType Edge::INT32;
constexpr Edge_DataType Edge::UINT8;
constexpr Edge_DataType Edge::INT64;
constexpr Edge_DataType Edge::STRING;
constexpr Edge_DataType Edge::BOOL;
constexpr Edge_DataType Edge::INT16;
constexpr Edge_DataType Edge::COMPLEX64;
constexpr Edge_DataType Edge::INT8;
constexpr Edge_DataType Edge::FLOAT16;
constexpr Edge_DataType Edge::FLOAT64;
constexpr Edge_DataType Edge::COMPLEX128;
constexpr Edge_DataType Edge::UINT64;
constexpr Edge_DataType Edge::RESOURCE;
constexpr Edge_DataType Edge::VARIANT;
constexpr Edge_DataType Edge::UINT32;
constexpr Edge_DataType Edge::UINT16;
constexpr Edge_DataType Edge::INT4;
constexpr Edge_DataType Edge::BFLOAT16;
constexpr Edge_DataType Edge::DataType_MIN;
constexpr Edge_DataType Edge::DataType_MAX;
constexpr int Edge::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_LayoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[2];
}
bool Edge_LayoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Edge_LayoutType Edge::UNKNOWN;
constexpr Edge_LayoutType Edge::SCALAR;
constexpr Edge_LayoutType Edge::LINEAR;
constexpr Edge_LayoutType Edge::HW;
constexpr Edge_LayoutType Edge::CHW;
constexpr Edge_LayoutType Edge::HWC;
constexpr Edge_LayoutType Edge::OIHW;
constexpr Edge_LayoutType Edge::OHWI;
constexpr Edge_LayoutType Edge::IHWO;
constexpr Edge_LayoutType Edge::IOHW;
constexpr Edge_LayoutType Edge::BHWC;
constexpr Edge_LayoutType Edge::HWDC;
constexpr Edge_LayoutType Edge::BHWDC;
constexpr Edge_LayoutType Edge::HWD;
constexpr Edge_LayoutType Edge::OHWDI;
constexpr Edge_LayoutType Edge::HWIO;
constexpr Edge_LayoutType Edge::LayoutType_MIN;
constexpr Edge_LayoutType Edge::LayoutType_MAX;
constexpr int Edge::LayoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ModelRuntimeDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelRuntimeDetails>()._impl_._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModelRuntimeDetails::ModelRuntimeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.ModelRuntimeDetails)
}
ModelRuntimeDetails::ModelRuntimeDetails(const ModelRuntimeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelRuntimeDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subgraphs_){from._impl_.subgraphs_}
    , decltype(_impl_.model_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_name()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.ModelRuntimeDetails)
}

inline void ModelRuntimeDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subgraphs_){arena}
    , decltype(_impl_.model_name_){}
  };
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelRuntimeDetails::~ModelRuntimeDetails() {
  // @@protoc_insertion_point(destructor:tflite.profiling.ModelRuntimeDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelRuntimeDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subgraphs_.~RepeatedPtrField();
  _impl_.model_name_.Destroy();
}

void ModelRuntimeDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelRuntimeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.ModelRuntimeDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subgraphs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.model_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRuntimeDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.ModelRuntimeDetails.model_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .tflite.profiling.RuntimeSubgraph subgraphs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subgraphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelRuntimeDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.ModelRuntimeDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.ModelRuntimeDetails.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // repeated .tflite.profiling.RuntimeSubgraph subgraphs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subgraphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_subgraphs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.ModelRuntimeDetails)
  return target;
}

size_t ModelRuntimeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.ModelRuntimeDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.profiling.RuntimeSubgraph subgraphs = 2;
  total_size += 1UL * this->_internal_subgraphs_size();
  for (const auto& msg : this->_impl_.subgraphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string model_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelRuntimeDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelRuntimeDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelRuntimeDetails::GetClassData() const { return &_class_data_; }


void ModelRuntimeDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelRuntimeDetails*>(&to_msg);
  auto& from = static_cast<const ModelRuntimeDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.ModelRuntimeDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subgraphs_.MergeFrom(from._impl_.subgraphs_);
  if (from._internal_has_model_name()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelRuntimeDetails::CopyFrom(const ModelRuntimeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.ModelRuntimeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRuntimeDetails::IsInitialized() const {
  return true;
}

void ModelRuntimeDetails::InternalSwap(ModelRuntimeDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subgraphs_.InternalSwap(&other->_impl_.subgraphs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRuntimeDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[0]);
}

// ===================================================================

class RuntimeSubgraph::_Internal {
 public:
  using HasBits = decltype(std::declval<RuntimeSubgraph>()._impl_._has_bits_);
  static void set_has_subgraph_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subgraph_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RuntimeSubgraph::RuntimeSubgraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.RuntimeSubgraph)
}
RuntimeSubgraph::RuntimeSubgraph(const RuntimeSubgraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RuntimeSubgraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edges_){from._impl_.edges_}
    , decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.execution_plan_){from._impl_.execution_plan_}
    , /*decltype(_impl_._execution_plan_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.subgraph_id_){}
    , decltype(_impl_.subgraph_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.subgraph_id_, &from._impl_.subgraph_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subgraph_type_) -
    reinterpret_cast<char*>(&_impl_.subgraph_id_)) + sizeof(_impl_.subgraph_type_));
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.RuntimeSubgraph)
}

inline void RuntimeSubgraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edges_){arena}
    , decltype(_impl_.nodes_){arena}
    , decltype(_impl_.execution_plan_){arena}
    , /*decltype(_impl_._execution_plan_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.subgraph_id_){0}
    , decltype(_impl_.subgraph_type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RuntimeSubgraph::~RuntimeSubgraph() {
  // @@protoc_insertion_point(destructor:tflite.profiling.RuntimeSubgraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RuntimeSubgraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_.~RepeatedPtrField();
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.execution_plan_.~RepeatedField();
  _impl_.name_.Destroy();
}

void RuntimeSubgraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RuntimeSubgraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.RuntimeSubgraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_.Clear();
  _impl_.nodes_.Clear();
  _impl_.execution_plan_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.subgraph_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.subgraph_type_) -
        reinterpret_cast<char*>(&_impl_.subgraph_id_)) + sizeof(_impl_.subgraph_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeSubgraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 subgraph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_subgraph_id(&has_bits);
          _impl_.subgraph_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tflite.profiling.Edge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tflite.profiling.Node nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 execution_plan = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_execution_plan(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_execution_plan(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.RuntimeSubgraph.SubgraphType subgraph_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tflite::profiling::RuntimeSubgraph_SubgraphType_IsValid(val))) {
            _internal_set_subgraph_type(static_cast<::tflite::profiling::RuntimeSubgraph_SubgraphType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.RuntimeSubgraph.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuntimeSubgraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.RuntimeSubgraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 subgraph_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_subgraph_id(), target);
  }

  // repeated .tflite.profiling.Edge edges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tflite.profiling.Node nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 execution_plan = 4 [packed = true];
  {
    int byte_size = _impl_._execution_plan_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_execution_plan(), byte_size, target);
    }
  }

  // optional .tflite.profiling.RuntimeSubgraph.SubgraphType subgraph_type = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_subgraph_type(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.RuntimeSubgraph.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.RuntimeSubgraph)
  return target;
}

size_t RuntimeSubgraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.RuntimeSubgraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.profiling.Edge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tflite.profiling.Node nodes = 3;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 execution_plan = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.execution_plan_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._execution_plan_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 subgraph_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subgraph_id());
    }

    // optional .tflite.profiling.RuntimeSubgraph.SubgraphType subgraph_type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_subgraph_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeSubgraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RuntimeSubgraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeSubgraph::GetClassData() const { return &_class_data_; }


void RuntimeSubgraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RuntimeSubgraph*>(&to_msg);
  auto& from = static_cast<const RuntimeSubgraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.RuntimeSubgraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.execution_plan_.MergeFrom(from._impl_.execution_plan_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.subgraph_id_ = from._impl_.subgraph_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.subgraph_type_ = from._impl_.subgraph_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeSubgraph::CopyFrom(const RuntimeSubgraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.RuntimeSubgraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeSubgraph::IsInitialized() const {
  return true;
}

void RuntimeSubgraph::InternalSwap(RuntimeSubgraph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.execution_plan_.InternalSwap(&other->_impl_.execution_plan_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeSubgraph, _impl_.subgraph_type_)
      + sizeof(RuntimeSubgraph::_impl_.subgraph_type_)
      - PROTOBUF_FIELD_OFFSET(RuntimeSubgraph, _impl_.subgraph_id_)>(
          reinterpret_cast<char*>(&_impl_.subgraph_id_),
          reinterpret_cast<char*>(&other->_impl_.subgraph_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeSubgraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[1]);
}

// ===================================================================

class Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Node>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::profiling::OpProfileData& op_profile_data(const Node* msg);
  static void set_has_op_profile_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::profiling::DelegateNodeDetails& delegate_node_details(const Node* msg);
};

const ::tflite::profiling::OpProfileData&
Node::_Internal::op_profile_data(const Node* msg) {
  return *msg->_impl_.op_profile_data_;
}
const ::tflite::profiling::DelegateNodeDetails&
Node::_Internal::delegate_node_details(const Node* msg) {
  return *msg->_impl_.node_info_.delegate_node_details_;
}
void Node::clear_op_profile_data() {
  if (_impl_.op_profile_data_ != nullptr) _impl_.op_profile_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Node::set_allocated_delegate_node_details(::tflite::profiling::DelegateNodeDetails* delegate_node_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node_info();
  if (delegate_node_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delegate_node_details);
    if (message_arena != submessage_arena) {
      delegate_node_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate_node_details, submessage_arena);
    }
    set_has_delegate_node_details();
    _impl_.node_info_.delegate_node_details_ = delegate_node_details;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.profiling.Node.delegate_node_details)
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inputs_){from._impl_.inputs_}
    , /*decltype(_impl_._inputs_cached_byte_size_)*/{0}
    , decltype(_impl_.outputs_){from._impl_.outputs_}
    , /*decltype(_impl_._outputs_cached_byte_size_)*/{0}
    , decltype(_impl_.intermediates_){from._impl_.intermediates_}
    , /*decltype(_impl_._intermediates_cached_byte_size_)*/{0}
    , decltype(_impl_.temporaries_){from._impl_.temporaries_}
    , /*decltype(_impl_._temporaries_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.op_profile_data_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.node_info_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_op_profile_data()) {
    _this->_impl_.op_profile_data_ = new ::tflite::profiling::OpProfileData(*from._impl_.op_profile_data_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  clear_has_node_info();
  switch (from.node_info_case()) {
    case kDelegateNodeDetails: {
      _this->_internal_mutable_delegate_node_details()->::tflite::profiling::DelegateNodeDetails::MergeFrom(
          from._internal_delegate_node_details());
      break;
    }
    case kDelegatedToNodeId: {
      _this->_internal_set_delegated_to_node_id(from._internal_delegated_to_node_id());
      break;
    }
    case NODE_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inputs_){arena}
    , /*decltype(_impl_._inputs_cached_byte_size_)*/{0}
    , decltype(_impl_.outputs_){arena}
    , /*decltype(_impl_._outputs_cached_byte_size_)*/{0}
    , decltype(_impl_.intermediates_){arena}
    , /*decltype(_impl_._intermediates_cached_byte_size_)*/{0}
    , decltype(_impl_.temporaries_){arena}
    , /*decltype(_impl_._temporaries_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.op_profile_data_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.node_info_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_node_info();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:tflite.profiling.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedField();
  _impl_.outputs_.~RepeatedField();
  _impl_.intermediates_.~RepeatedField();
  _impl_.temporaries_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.op_profile_data_;
  if (has_node_info()) {
    clear_node_info();
  }
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::clear_node_info() {
// @@protoc_insertion_point(one_of_clear_start:tflite.profiling.Node)
  switch (node_info_case()) {
    case kDelegateNodeDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_info_.delegate_node_details_;
      }
      break;
    }
    case kDelegatedToNodeId: {
      // No need to clear
      break;
    }
    case NODE_INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_INFO_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.outputs_.Clear();
  _impl_.intermediates_.Clear();
  _impl_.temporaries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.op_profile_data_ != nullptr);
      _impl_.op_profile_data_->Clear();
    }
  }
  _impl_.id_ = 0;
  clear_node_info();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.Node.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.Node.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int32 inputs = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_inputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_inputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 outputs = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_outputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_outputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 intermediates = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intermediates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_intermediates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 temporaries = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_temporaries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_temporaries(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tflite.profiling.DelegateNodeDetails delegate_node_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate_node_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delegated_to_node_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_delegated_to_node_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.OpProfileData op_profile_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_profile_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.Node.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.Node.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // repeated int32 inputs = 4 [packed = true];
  {
    int byte_size = _impl_._inputs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_inputs(), byte_size, target);
    }
  }

  // repeated int32 outputs = 5 [packed = true];
  {
    int byte_size = _impl_._outputs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_outputs(), byte_size, target);
    }
  }

  // repeated int32 intermediates = 6 [packed = true];
  {
    int byte_size = _impl_._intermediates_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_intermediates(), byte_size, target);
    }
  }

  // repeated int32 temporaries = 7 [packed = true];
  {
    int byte_size = _impl_._temporaries_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_temporaries(), byte_size, target);
    }
  }

  switch (node_info_case()) {
    case kDelegateNodeDetails: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::delegate_node_details(this),
          _Internal::delegate_node_details(this).GetCachedSize(), target, stream);
      break;
    }
    case kDelegatedToNodeId: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_delegated_to_node_id(), target);
      break;
    }
    default: ;
  }
  // optional .tflite.profiling.OpProfileData op_profile_data = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::op_profile_data(this),
        _Internal::op_profile_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 inputs = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.inputs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._inputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 outputs = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.outputs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._outputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 intermediates = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.intermediates_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._intermediates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 temporaries = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.temporaries_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._temporaries_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .tflite.profiling.OpProfileData op_profile_data = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_profile_data_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  switch (node_info_case()) {
    // .tflite.profiling.DelegateNodeDetails delegate_node_details = 8;
    case kDelegateNodeDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_info_.delegate_node_details_);
      break;
    }
    // int32 delegated_to_node_id = 9;
    case kDelegatedToNodeId: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delegated_to_node_id());
      break;
    }
    case NODE_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  _this->_impl_.outputs_.MergeFrom(from._impl_.outputs_);
  _this->_impl_.intermediates_.MergeFrom(from._impl_.intermediates_);
  _this->_impl_.temporaries_.MergeFrom(from._impl_.temporaries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_op_profile_data()->::tflite::profiling::OpProfileData::MergeFrom(
          from._internal_op_profile_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.node_info_case()) {
    case kDelegateNodeDetails: {
      _this->_internal_mutable_delegate_node_details()->::tflite::profiling::DelegateNodeDetails::MergeFrom(
          from._internal_delegate_node_details());
      break;
    }
    case kDelegatedToNodeId: {
      _this->_internal_set_delegated_to_node_id(from._internal_delegated_to_node_id());
      break;
    }
    case NODE_INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  _impl_.outputs_.InternalSwap(&other->_impl_.outputs_);
  _impl_.intermediates_.InternalSwap(&other->_impl_.intermediates_);
  _impl_.temporaries_.InternalSwap(&other->_impl_.temporaries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.id_)
      + sizeof(Node::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.op_profile_data_)>(
          reinterpret_cast<char*>(&_impl_.op_profile_data_),
          reinterpret_cast<char*>(&other->_impl_.op_profile_data_));
  swap(_impl_.node_info_, other->_impl_.node_info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[2]);
}

// ===================================================================

class DelegateNodeDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<DelegateNodeDetails>()._impl_._has_bits_);
  static void set_has_delegate_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DelegateNodeDetails::DelegateNodeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.DelegateNodeDetails)
}
DelegateNodeDetails::DelegateNodeDetails(const DelegateNodeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegateNodeDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tflite_node_ids_replaced_){from._impl_.tflite_node_ids_replaced_}
    , /*decltype(_impl_._tflite_node_ids_replaced_cached_byte_size_)*/{0}
    , decltype(_impl_.delegate_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegate_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_delegate_name()) {
    _this->_impl_.delegate_name_.Set(from._internal_delegate_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.DelegateNodeDetails)
}

inline void DelegateNodeDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tflite_node_ids_replaced_){arena}
    , /*decltype(_impl_._tflite_node_ids_replaced_cached_byte_size_)*/{0}
    , decltype(_impl_.delegate_name_){}
  };
  _impl_.delegate_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegateNodeDetails::~DelegateNodeDetails() {
  // @@protoc_insertion_point(destructor:tflite.profiling.DelegateNodeDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegateNodeDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tflite_node_ids_replaced_.~RepeatedField();
  _impl_.delegate_name_.Destroy();
}

void DelegateNodeDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegateNodeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.DelegateNodeDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tflite_node_ids_replaced_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.delegate_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateNodeDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string delegate_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegate_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.DelegateNodeDetails.delegate_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int32 tflite_node_ids_replaced = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tflite_node_ids_replaced(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_tflite_node_ids_replaced(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelegateNodeDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.DelegateNodeDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string delegate_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_delegate_name().data(), static_cast<int>(this->_internal_delegate_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.DelegateNodeDetails.delegate_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegate_name(), target);
  }

  // repeated int32 tflite_node_ids_replaced = 2 [packed = true];
  {
    int byte_size = _impl_._tflite_node_ids_replaced_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_tflite_node_ids_replaced(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.DelegateNodeDetails)
  return target;
}

size_t DelegateNodeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.DelegateNodeDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tflite_node_ids_replaced = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.tflite_node_ids_replaced_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tflite_node_ids_replaced_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string delegate_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegateNodeDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegateNodeDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegateNodeDetails::GetClassData() const { return &_class_data_; }


void DelegateNodeDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegateNodeDetails*>(&to_msg);
  auto& from = static_cast<const DelegateNodeDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.DelegateNodeDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tflite_node_ids_replaced_.MergeFrom(from._impl_.tflite_node_ids_replaced_);
  if (from._internal_has_delegate_name()) {
    _this->_internal_set_delegate_name(from._internal_delegate_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegateNodeDetails::CopyFrom(const DelegateNodeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.DelegateNodeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateNodeDetails::IsInitialized() const {
  return true;
}

void DelegateNodeDetails::InternalSwap(DelegateNodeDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tflite_node_ids_replaced_.InternalSwap(&other->_impl_.tflite_node_ids_replaced_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delegate_name_, lhs_arena,
      &other->_impl_.delegate_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateNodeDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[3]);
}

// ===================================================================

class Edge::_Internal {
 public:
  using HasBits = decltype(std::declval<Edge>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allocation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_layout_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.allocation_type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_type_){}
    , decltype(_impl_.layout_type_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.allocation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.allocation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_allocation_type()) {
    _this->_impl_.allocation_type_.Set(from._internal_allocation_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.allocation_type_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.data_type_){0}
    , decltype(_impl_.layout_type_){0}
    , decltype(_impl_.size_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.allocation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.allocation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:tflite.profiling.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.allocation_type_.Destroy();
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.allocation_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.Edge.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.Edge.DataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tflite::profiling::Edge_DataType_IsValid(val))) {
            _internal_set_data_type(static_cast<::tflite::profiling::Edge_DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string allocation_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_allocation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.Edge.allocation_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.Edge.LayoutType layout_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tflite::profiling::Edge_LayoutType_IsValid(val))) {
            _internal_set_layout_type(static_cast<::tflite::profiling::Edge_LayoutType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.Edge.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .tflite.profiling.Edge.DataType data_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // repeated int32 shape = 4 [packed = true];
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_shape(), byte_size, target);
    }
  }

  // optional string allocation_type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_allocation_type().data(), static_cast<int>(this->_internal_allocation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.Edge.allocation_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_allocation_type(), target);
  }

  // optional .tflite.profiling.Edge.LayoutType layout_type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_layout_type(), target);
  }

  // optional int32 size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string allocation_type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_allocation_type());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .tflite.profiling.Edge.DataType data_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_data_type());
    }

    // optional .tflite.profiling.Edge.LayoutType layout_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_layout_type());
    }

    // optional int32 size = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_allocation_type(from._internal_allocation_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_type_ = from._impl_.data_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.layout_type_ = from._impl_.layout_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.allocation_type_, lhs_arena,
      &other->_impl_.allocation_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.size_)
      + sizeof(Edge::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fmodel_5fruntime_5finfo_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace profiling
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::profiling::ModelRuntimeDetails*
Arena::CreateMaybeMessage< ::tflite::profiling::ModelRuntimeDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::ModelRuntimeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::RuntimeSubgraph*
Arena::CreateMaybeMessage< ::tflite::profiling::RuntimeSubgraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::RuntimeSubgraph >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::Node*
Arena::CreateMaybeMessage< ::tflite::profiling::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::DelegateNodeDetails*
Arena::CreateMaybeMessage< ::tflite::profiling::DelegateNodeDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::DelegateNodeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::Edge*
Arena::CreateMaybeMessage< ::tflite::profiling::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::Edge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

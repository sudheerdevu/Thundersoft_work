// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/profiling/proto/profiling_info.proto

#include "tensorflow/lite/profiling/proto/profiling_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tflite {
namespace profiling {
PROTOBUF_CONSTEXPR BenchmarkProfilingData::BenchmarkProfilingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.init_profile_)*/nullptr
  , /*decltype(_impl_.runtime_profile_)*/nullptr} {}
struct BenchmarkProfilingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkProfilingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkProfilingDataDefaultTypeInternal() {}
  union {
    BenchmarkProfilingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkProfilingDataDefaultTypeInternal _BenchmarkProfilingData_default_instance_;
PROTOBUF_CONSTEXPR ModelProfilingData::ModelProfilingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subgraph_profiles_)*/{}
  , /*decltype(_impl_.delegate_profiles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelProfilingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelProfilingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelProfilingDataDefaultTypeInternal() {}
  union {
    ModelProfilingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelProfilingDataDefaultTypeInternal _ModelProfilingData_default_instance_;
PROTOBUF_CONSTEXPR SubGraphProfilingData::SubGraphProfilingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.per_op_profiles_)*/{}
  , /*decltype(_impl_.subgraph_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subgraph_index_)*/0} {}
struct SubGraphProfilingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubGraphProfilingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubGraphProfilingDataDefaultTypeInternal() {}
  union {
    SubGraphProfilingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubGraphProfilingDataDefaultTypeInternal _SubGraphProfilingData_default_instance_;
PROTOBUF_CONSTEXPR DelegateProfilingData::DelegateProfilingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.per_op_profiles_)*/{}
  , /*decltype(_impl_.delegate_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DelegateProfilingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegateProfilingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegateProfilingDataDefaultTypeInternal() {}
  union {
    DelegateProfilingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegateProfilingDataDefaultTypeInternal _DelegateProfilingData_default_instance_;
PROTOBUF_CONSTEXPR OpProfilingStat::OpProfilingStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.first_)*/int64_t{0}
  , /*decltype(_impl_.last_)*/int64_t{0}
  , /*decltype(_impl_.avg_)*/int64_t{0}
  , /*decltype(_impl_.stddev_)*/0
  , /*decltype(_impl_.variance_)*/0
  , /*decltype(_impl_.min_)*/int64_t{0}
  , /*decltype(_impl_.max_)*/int64_t{0}
  , /*decltype(_impl_.sum_)*/int64_t{0}
  , /*decltype(_impl_.count_)*/int64_t{0}} {}
struct OpProfilingStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpProfilingStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpProfilingStatDefaultTypeInternal() {}
  union {
    OpProfilingStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpProfilingStatDefaultTypeInternal _OpProfilingStat_default_instance_;
PROTOBUF_CONSTEXPR OpProfileData::OpProfileData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inference_microseconds_)*/nullptr
  , /*decltype(_impl_.mem_kb_)*/nullptr
  , /*decltype(_impl_.times_called_)*/int64_t{0}
  , /*decltype(_impl_.run_order_)*/int64_t{0}} {}
struct OpProfileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpProfileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpProfileDataDefaultTypeInternal() {}
  union {
    OpProfileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpProfileDataDefaultTypeInternal _OpProfileData_default_instance_;
}  // namespace profiling
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::BenchmarkProfilingData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::BenchmarkProfilingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::BenchmarkProfilingData, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::BenchmarkProfilingData, _impl_.init_profile_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::BenchmarkProfilingData, _impl_.runtime_profile_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelProfilingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelProfilingData, _impl_.subgraph_profiles_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::ModelProfilingData, _impl_.delegate_profiles_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::SubGraphProfilingData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::SubGraphProfilingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::SubGraphProfilingData, _impl_.subgraph_name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::SubGraphProfilingData, _impl_.subgraph_index_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::SubGraphProfilingData, _impl_.per_op_profiles_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateProfilingData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateProfilingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateProfilingData, _impl_.delegate_name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::DelegateProfilingData, _impl_.per_op_profiles_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.last_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.avg_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.stddev_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.variance_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.sum_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfilingStat, _impl_.count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_.node_type_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_.inference_microseconds_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_.mem_kb_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_.times_called_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tflite::profiling::OpProfileData, _impl_.run_order_),
  0,
  2,
  3,
  4,
  1,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::tflite::profiling::BenchmarkProfilingData)},
  { 12, -1, -1, sizeof(::tflite::profiling::ModelProfilingData)},
  { 20, 29, -1, sizeof(::tflite::profiling::SubGraphProfilingData)},
  { 32, 40, -1, sizeof(::tflite::profiling::DelegateProfilingData)},
  { 42, 57, -1, sizeof(::tflite::profiling::OpProfilingStat)},
  { 66, 78, -1, sizeof(::tflite::profiling::OpProfileData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tflite::profiling::_BenchmarkProfilingData_default_instance_._instance,
  &::tflite::profiling::_ModelProfilingData_default_instance_._instance,
  &::tflite::profiling::_SubGraphProfilingData_default_instance_._instance,
  &::tflite::profiling::_DelegateProfilingData_default_instance_._instance,
  &::tflite::profiling::_OpProfilingStat_default_instance_._instance,
  &::tflite::profiling::_OpProfileData_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4tensorflow/lite/profiling/proto/profil"
  "ing_info.proto\022\020tflite.profiling\"\247\001\n\026Ben"
  "chmarkProfilingData\022\022\n\nmodel_name\030\001 \001(\t\022"
  ":\n\014init_profile\030\002 \001(\0132$.tflite.profiling"
  ".ModelProfilingData\022=\n\017runtime_profile\030\003"
  " \001(\0132$.tflite.profiling.ModelProfilingDa"
  "ta\"\234\001\n\022ModelProfilingData\022B\n\021subgraph_pr"
  "ofiles\030\001 \003(\0132\'.tflite.profiling.SubGraph"
  "ProfilingData\022B\n\021delegate_profiles\030\002 \003(\013"
  "2\'.tflite.profiling.DelegateProfilingDat"
  "a\"\200\001\n\025SubGraphProfilingData\022\025\n\rsubgraph_"
  "name\030\001 \001(\t\022\026\n\016subgraph_index\030\002 \001(\005\0228\n\017pe"
  "r_op_profiles\030\003 \003(\0132\037.tflite.profiling.O"
  "pProfileData\"h\n\025DelegateProfilingData\022\025\n"
  "\rdelegate_name\030\001 \001(\t\0228\n\017per_op_profiles\030"
  "\002 \003(\0132\037.tflite.profiling.OpProfileData\"\223"
  "\001\n\017OpProfilingStat\022\r\n\005first\030\001 \001(\003\022\014\n\004las"
  "t\030\002 \001(\003\022\013\n\003avg\030\003 \001(\003\022\016\n\006stddev\030\004 \001(\002\022\020\n\010"
  "variance\030\005 \001(\002\022\013\n\003min\030\006 \001(\003\022\013\n\003max\030\007 \001(\003"
  "\022\013\n\003sum\030\010 \001(\003\022\r\n\005count\030\t \001(\003\"\317\001\n\rOpProfi"
  "leData\022\021\n\tnode_type\030\001 \001(\t\022A\n\026inference_m"
  "icroseconds\030\002 \001(\0132!.tflite.profiling.OpP"
  "rofilingStat\0221\n\006mem_kb\030\003 \001(\0132!.tflite.pr"
  "ofiling.OpProfilingStat\022\024\n\014times_called\030"
  "\004 \001(\003\022\014\n\004name\030\005 \001(\t\022\021\n\trun_order\030\006 \001(\003B\002"
  "P\001"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto = {
    false, false, 1002, descriptor_table_protodef_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto,
    "tensorflow/lite/profiling/proto/profiling_info.proto",
    &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto::offsets,
    file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto, file_level_enum_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto,
    file_level_service_descriptors_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter() {
  return &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto(&descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto);
namespace tflite {
namespace profiling {

// ===================================================================

class BenchmarkProfilingData::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkProfilingData>()._impl_._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::profiling::ModelProfilingData& init_profile(const BenchmarkProfilingData* msg);
  static void set_has_init_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::profiling::ModelProfilingData& runtime_profile(const BenchmarkProfilingData* msg);
  static void set_has_runtime_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tflite::profiling::ModelProfilingData&
BenchmarkProfilingData::_Internal::init_profile(const BenchmarkProfilingData* msg) {
  return *msg->_impl_.init_profile_;
}
const ::tflite::profiling::ModelProfilingData&
BenchmarkProfilingData::_Internal::runtime_profile(const BenchmarkProfilingData* msg) {
  return *msg->_impl_.runtime_profile_;
}
BenchmarkProfilingData::BenchmarkProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.BenchmarkProfilingData)
}
BenchmarkProfilingData::BenchmarkProfilingData(const BenchmarkProfilingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BenchmarkProfilingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.init_profile_){nullptr}
    , decltype(_impl_.runtime_profile_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_name()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_init_profile()) {
    _this->_impl_.init_profile_ = new ::tflite::profiling::ModelProfilingData(*from._impl_.init_profile_);
  }
  if (from._internal_has_runtime_profile()) {
    _this->_impl_.runtime_profile_ = new ::tflite::profiling::ModelProfilingData(*from._impl_.runtime_profile_);
  }
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.BenchmarkProfilingData)
}

inline void BenchmarkProfilingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.init_profile_){nullptr}
    , decltype(_impl_.runtime_profile_){nullptr}
  };
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BenchmarkProfilingData::~BenchmarkProfilingData() {
  // @@protoc_insertion_point(destructor:tflite.profiling.BenchmarkProfilingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BenchmarkProfilingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.init_profile_;
  if (this != internal_default_instance()) delete _impl_.runtime_profile_;
}

void BenchmarkProfilingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BenchmarkProfilingData::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.BenchmarkProfilingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.init_profile_ != nullptr);
      _impl_.init_profile_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.runtime_profile_ != nullptr);
      _impl_.runtime_profile_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BenchmarkProfilingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.BenchmarkProfilingData.model_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.ModelProfilingData init_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.ModelProfilingData runtime_profile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BenchmarkProfilingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.BenchmarkProfilingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.BenchmarkProfilingData.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // optional .tflite.profiling.ModelProfilingData init_profile = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::init_profile(this),
        _Internal::init_profile(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.profiling.ModelProfilingData runtime_profile = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::runtime_profile(this),
        _Internal::runtime_profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.BenchmarkProfilingData)
  return target;
}

size_t BenchmarkProfilingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.BenchmarkProfilingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional .tflite.profiling.ModelProfilingData init_profile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.init_profile_);
    }

    // optional .tflite.profiling.ModelProfilingData runtime_profile = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.runtime_profile_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BenchmarkProfilingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BenchmarkProfilingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BenchmarkProfilingData::GetClassData() const { return &_class_data_; }


void BenchmarkProfilingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkProfilingData*>(&to_msg);
  auto& from = static_cast<const BenchmarkProfilingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.BenchmarkProfilingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_init_profile()->::tflite::profiling::ModelProfilingData::MergeFrom(
          from._internal_init_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_runtime_profile()->::tflite::profiling::ModelProfilingData::MergeFrom(
          from._internal_runtime_profile());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkProfilingData::CopyFrom(const BenchmarkProfilingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.BenchmarkProfilingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchmarkProfilingData::IsInitialized() const {
  return true;
}

void BenchmarkProfilingData::InternalSwap(BenchmarkProfilingData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkProfilingData, _impl_.runtime_profile_)
      + sizeof(BenchmarkProfilingData::_impl_.runtime_profile_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkProfilingData, _impl_.init_profile_)>(
          reinterpret_cast<char*>(&_impl_.init_profile_),
          reinterpret_cast<char*>(&other->_impl_.init_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkProfilingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[0]);
}

// ===================================================================

class ModelProfilingData::_Internal {
 public:
};

ModelProfilingData::ModelProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.ModelProfilingData)
}
ModelProfilingData::ModelProfilingData(const ModelProfilingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelProfilingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subgraph_profiles_){from._impl_.subgraph_profiles_}
    , decltype(_impl_.delegate_profiles_){from._impl_.delegate_profiles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.ModelProfilingData)
}

inline void ModelProfilingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subgraph_profiles_){arena}
    , decltype(_impl_.delegate_profiles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelProfilingData::~ModelProfilingData() {
  // @@protoc_insertion_point(destructor:tflite.profiling.ModelProfilingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelProfilingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subgraph_profiles_.~RepeatedPtrField();
  _impl_.delegate_profiles_.~RepeatedPtrField();
}

void ModelProfilingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelProfilingData::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.ModelProfilingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subgraph_profiles_.Clear();
  _impl_.delegate_profiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProfilingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tflite.profiling.SubGraphProfilingData subgraph_profiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subgraph_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tflite.profiling.DelegateProfilingData delegate_profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegate_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelProfilingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.ModelProfilingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.profiling.SubGraphProfilingData subgraph_profiles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subgraph_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_subgraph_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tflite.profiling.DelegateProfilingData delegate_profiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delegate_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_delegate_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.ModelProfilingData)
  return target;
}

size_t ModelProfilingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.ModelProfilingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.profiling.SubGraphProfilingData subgraph_profiles = 1;
  total_size += 1UL * this->_internal_subgraph_profiles_size();
  for (const auto& msg : this->_impl_.subgraph_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tflite.profiling.DelegateProfilingData delegate_profiles = 2;
  total_size += 1UL * this->_internal_delegate_profiles_size();
  for (const auto& msg : this->_impl_.delegate_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelProfilingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelProfilingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelProfilingData::GetClassData() const { return &_class_data_; }


void ModelProfilingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelProfilingData*>(&to_msg);
  auto& from = static_cast<const ModelProfilingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.ModelProfilingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subgraph_profiles_.MergeFrom(from._impl_.subgraph_profiles_);
  _this->_impl_.delegate_profiles_.MergeFrom(from._impl_.delegate_profiles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelProfilingData::CopyFrom(const ModelProfilingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.ModelProfilingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProfilingData::IsInitialized() const {
  return true;
}

void ModelProfilingData::InternalSwap(ModelProfilingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subgraph_profiles_.InternalSwap(&other->_impl_.subgraph_profiles_);
  _impl_.delegate_profiles_.InternalSwap(&other->_impl_.delegate_profiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProfilingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[1]);
}

// ===================================================================

class SubGraphProfilingData::_Internal {
 public:
  using HasBits = decltype(std::declval<SubGraphProfilingData>()._impl_._has_bits_);
  static void set_has_subgraph_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subgraph_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SubGraphProfilingData::SubGraphProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.SubGraphProfilingData)
}
SubGraphProfilingData::SubGraphProfilingData(const SubGraphProfilingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubGraphProfilingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_op_profiles_){from._impl_.per_op_profiles_}
    , decltype(_impl_.subgraph_name_){}
    , decltype(_impl_.subgraph_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subgraph_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subgraph_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subgraph_name()) {
    _this->_impl_.subgraph_name_.Set(from._internal_subgraph_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subgraph_index_ = from._impl_.subgraph_index_;
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.SubGraphProfilingData)
}

inline void SubGraphProfilingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_op_profiles_){arena}
    , decltype(_impl_.subgraph_name_){}
    , decltype(_impl_.subgraph_index_){0}
  };
  _impl_.subgraph_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subgraph_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubGraphProfilingData::~SubGraphProfilingData() {
  // @@protoc_insertion_point(destructor:tflite.profiling.SubGraphProfilingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubGraphProfilingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.per_op_profiles_.~RepeatedPtrField();
  _impl_.subgraph_name_.Destroy();
}

void SubGraphProfilingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubGraphProfilingData::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.SubGraphProfilingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_op_profiles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.subgraph_name_.ClearNonDefaultToEmpty();
  }
  _impl_.subgraph_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubGraphProfilingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string subgraph_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subgraph_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.SubGraphProfilingData.subgraph_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 subgraph_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_subgraph_index(&has_bits);
          _impl_.subgraph_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tflite.profiling.OpProfileData per_op_profiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_op_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubGraphProfilingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.SubGraphProfilingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string subgraph_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subgraph_name().data(), static_cast<int>(this->_internal_subgraph_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.SubGraphProfilingData.subgraph_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subgraph_name(), target);
  }

  // optional int32 subgraph_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_subgraph_index(), target);
  }

  // repeated .tflite.profiling.OpProfileData per_op_profiles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_per_op_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_per_op_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.SubGraphProfilingData)
  return target;
}

size_t SubGraphProfilingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.SubGraphProfilingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.profiling.OpProfileData per_op_profiles = 3;
  total_size += 1UL * this->_internal_per_op_profiles_size();
  for (const auto& msg : this->_impl_.per_op_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string subgraph_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subgraph_name());
    }

    // optional int32 subgraph_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subgraph_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubGraphProfilingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubGraphProfilingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubGraphProfilingData::GetClassData() const { return &_class_data_; }


void SubGraphProfilingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubGraphProfilingData*>(&to_msg);
  auto& from = static_cast<const SubGraphProfilingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.SubGraphProfilingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.per_op_profiles_.MergeFrom(from._impl_.per_op_profiles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_subgraph_name(from._internal_subgraph_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.subgraph_index_ = from._impl_.subgraph_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubGraphProfilingData::CopyFrom(const SubGraphProfilingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.SubGraphProfilingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubGraphProfilingData::IsInitialized() const {
  return true;
}

void SubGraphProfilingData::InternalSwap(SubGraphProfilingData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.per_op_profiles_.InternalSwap(&other->_impl_.per_op_profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subgraph_name_, lhs_arena,
      &other->_impl_.subgraph_name_, rhs_arena
  );
  swap(_impl_.subgraph_index_, other->_impl_.subgraph_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubGraphProfilingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[2]);
}

// ===================================================================

class DelegateProfilingData::_Internal {
 public:
  using HasBits = decltype(std::declval<DelegateProfilingData>()._impl_._has_bits_);
  static void set_has_delegate_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DelegateProfilingData::DelegateProfilingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.DelegateProfilingData)
}
DelegateProfilingData::DelegateProfilingData(const DelegateProfilingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegateProfilingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_op_profiles_){from._impl_.per_op_profiles_}
    , decltype(_impl_.delegate_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegate_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_delegate_name()) {
    _this->_impl_.delegate_name_.Set(from._internal_delegate_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.DelegateProfilingData)
}

inline void DelegateProfilingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_op_profiles_){arena}
    , decltype(_impl_.delegate_name_){}
  };
  _impl_.delegate_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delegate_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegateProfilingData::~DelegateProfilingData() {
  // @@protoc_insertion_point(destructor:tflite.profiling.DelegateProfilingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegateProfilingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.per_op_profiles_.~RepeatedPtrField();
  _impl_.delegate_name_.Destroy();
}

void DelegateProfilingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegateProfilingData::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.DelegateProfilingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_op_profiles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.delegate_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateProfilingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string delegate_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegate_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.DelegateProfilingData.delegate_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .tflite.profiling.OpProfileData per_op_profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_op_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelegateProfilingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.DelegateProfilingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string delegate_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_delegate_name().data(), static_cast<int>(this->_internal_delegate_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.DelegateProfilingData.delegate_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegate_name(), target);
  }

  // repeated .tflite.profiling.OpProfileData per_op_profiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_per_op_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_per_op_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.DelegateProfilingData)
  return target;
}

size_t DelegateProfilingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.DelegateProfilingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.profiling.OpProfileData per_op_profiles = 2;
  total_size += 1UL * this->_internal_per_op_profiles_size();
  for (const auto& msg : this->_impl_.per_op_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string delegate_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegateProfilingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegateProfilingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegateProfilingData::GetClassData() const { return &_class_data_; }


void DelegateProfilingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegateProfilingData*>(&to_msg);
  auto& from = static_cast<const DelegateProfilingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.DelegateProfilingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.per_op_profiles_.MergeFrom(from._impl_.per_op_profiles_);
  if (from._internal_has_delegate_name()) {
    _this->_internal_set_delegate_name(from._internal_delegate_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegateProfilingData::CopyFrom(const DelegateProfilingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.DelegateProfilingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateProfilingData::IsInitialized() const {
  return true;
}

void DelegateProfilingData::InternalSwap(DelegateProfilingData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.per_op_profiles_.InternalSwap(&other->_impl_.per_op_profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delegate_name_, lhs_arena,
      &other->_impl_.delegate_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateProfilingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[3]);
}

// ===================================================================

class OpProfilingStat::_Internal {
 public:
  using HasBits = decltype(std::declval<OpProfilingStat>()._impl_._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

OpProfilingStat::OpProfilingStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.OpProfilingStat)
}
OpProfilingStat::OpProfilingStat(const OpProfilingStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpProfilingStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){}
    , decltype(_impl_.last_){}
    , decltype(_impl_.avg_){}
    , decltype(_impl_.stddev_){}
    , decltype(_impl_.variance_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}
    , decltype(_impl_.sum_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.first_, &from._impl_.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.OpProfilingStat)
}

inline void OpProfilingStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){int64_t{0}}
    , decltype(_impl_.last_){int64_t{0}}
    , decltype(_impl_.avg_){int64_t{0}}
    , decltype(_impl_.stddev_){0}
    , decltype(_impl_.variance_){0}
    , decltype(_impl_.min_){int64_t{0}}
    , decltype(_impl_.max_){int64_t{0}}
    , decltype(_impl_.sum_){int64_t{0}}
    , decltype(_impl_.count_){int64_t{0}}
  };
}

OpProfilingStat::~OpProfilingStat() {
  // @@protoc_insertion_point(destructor:tflite.profiling.OpProfilingStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpProfilingStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpProfilingStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpProfilingStat::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.OpProfilingStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sum_) -
        reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.sum_));
  }
  _impl_.count_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpProfilingStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last(&has_bits);
          _impl_.last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 avg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_avg(&has_bits);
          _impl_.avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float stddev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_stddev(&has_bits);
          _impl_.stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float variance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_variance(&has_bits);
          _impl_.variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 sum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sum(&has_bits);
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpProfilingStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.OpProfilingStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_first(), target);
  }

  // optional int64 last = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last(), target);
  }

  // optional int64 avg = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_avg(), target);
  }

  // optional float stddev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_stddev(), target);
  }

  // optional float variance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_variance(), target);
  }

  // optional int64 min = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_min(), target);
  }

  // optional int64 max = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_max(), target);
  }

  // optional int64 sum = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_sum(), target);
  }

  // optional int64 count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.OpProfilingStat)
  return target;
}

size_t OpProfilingStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.OpProfilingStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 first = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first());
    }

    // optional int64 last = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last());
    }

    // optional int64 avg = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_avg());
    }

    // optional float stddev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float variance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int64 min = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min());
    }

    // optional int64 max = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max());
    }

    // optional int64 sum = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sum());
    }

  }
  // optional int64 count = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpProfilingStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpProfilingStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpProfilingStat::GetClassData() const { return &_class_data_; }


void OpProfilingStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpProfilingStat*>(&to_msg);
  auto& from = static_cast<const OpProfilingStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.OpProfilingStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.last_ = from._impl_.last_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.avg_ = from._impl_.avg_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.stddev_ = from._impl_.stddev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.variance_ = from._impl_.variance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sum_ = from._impl_.sum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpProfilingStat::CopyFrom(const OpProfilingStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.OpProfilingStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpProfilingStat::IsInitialized() const {
  return true;
}

void OpProfilingStat::InternalSwap(OpProfilingStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpProfilingStat, _impl_.count_)
      + sizeof(OpProfilingStat::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(OpProfilingStat, _impl_.first_)>(
          reinterpret_cast<char*>(&_impl_.first_),
          reinterpret_cast<char*>(&other->_impl_.first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpProfilingStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[4]);
}

// ===================================================================

class OpProfileData::_Internal {
 public:
  using HasBits = decltype(std::declval<OpProfileData>()._impl_._has_bits_);
  static void set_has_node_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::profiling::OpProfilingStat& inference_microseconds(const OpProfileData* msg);
  static void set_has_inference_microseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::profiling::OpProfilingStat& mem_kb(const OpProfileData* msg);
  static void set_has_mem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_times_called(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_run_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::tflite::profiling::OpProfilingStat&
OpProfileData::_Internal::inference_microseconds(const OpProfileData* msg) {
  return *msg->_impl_.inference_microseconds_;
}
const ::tflite::profiling::OpProfilingStat&
OpProfileData::_Internal::mem_kb(const OpProfileData* msg) {
  return *msg->_impl_.mem_kb_;
}
OpProfileData::OpProfileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tflite.profiling.OpProfileData)
}
OpProfileData::OpProfileData(const OpProfileData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpProfileData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inference_microseconds_){nullptr}
    , decltype(_impl_.mem_kb_){nullptr}
    , decltype(_impl_.times_called_){}
    , decltype(_impl_.run_order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_node_type()) {
    _this->_impl_.node_type_.Set(from._internal_node_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inference_microseconds()) {
    _this->_impl_.inference_microseconds_ = new ::tflite::profiling::OpProfilingStat(*from._impl_.inference_microseconds_);
  }
  if (from._internal_has_mem_kb()) {
    _this->_impl_.mem_kb_ = new ::tflite::profiling::OpProfilingStat(*from._impl_.mem_kb_);
  }
  ::memcpy(&_impl_.times_called_, &from._impl_.times_called_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.run_order_) -
    reinterpret_cast<char*>(&_impl_.times_called_)) + sizeof(_impl_.run_order_));
  // @@protoc_insertion_point(copy_constructor:tflite.profiling.OpProfileData)
}

inline void OpProfileData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inference_microseconds_){nullptr}
    , decltype(_impl_.mem_kb_){nullptr}
    , decltype(_impl_.times_called_){int64_t{0}}
    , decltype(_impl_.run_order_){int64_t{0}}
  };
  _impl_.node_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpProfileData::~OpProfileData() {
  // @@protoc_insertion_point(destructor:tflite.profiling.OpProfileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpProfileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_type_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inference_microseconds_;
  if (this != internal_default_instance()) delete _impl_.mem_kb_;
}

void OpProfileData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpProfileData::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.profiling.OpProfileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inference_microseconds_ != nullptr);
      _impl_.inference_microseconds_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mem_kb_ != nullptr);
      _impl_.mem_kb_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.times_called_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.run_order_) -
        reinterpret_cast<char*>(&_impl_.times_called_)) + sizeof(_impl_.run_order_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpProfileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.OpProfileData.node_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.OpProfilingStat inference_microseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inference_microseconds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.profiling.OpProfilingStat mem_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mem_kb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 times_called = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_times_called(&has_bits);
          _impl_.times_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tflite.profiling.OpProfileData.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 run_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_run_order(&has_bits);
          _impl_.run_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpProfileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.profiling.OpProfileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_type().data(), static_cast<int>(this->_internal_node_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.OpProfileData.node_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_type(), target);
  }

  // optional .tflite.profiling.OpProfilingStat inference_microseconds = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inference_microseconds(this),
        _Internal::inference_microseconds(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.profiling.OpProfilingStat mem_kb = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mem_kb(this),
        _Internal::mem_kb(this).GetCachedSize(), target, stream);
  }

  // optional int64 times_called = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_times_called(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.profiling.OpProfileData.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional int64 run_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_run_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.profiling.OpProfileData)
  return target;
}

size_t OpProfileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.profiling.OpProfileData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string node_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_type());
    }

    // optional string name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .tflite.profiling.OpProfilingStat inference_microseconds = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inference_microseconds_);
    }

    // optional .tflite.profiling.OpProfilingStat mem_kb = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mem_kb_);
    }

    // optional int64 times_called = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_times_called());
    }

    // optional int64 run_order = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_run_order());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpProfileData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpProfileData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpProfileData::GetClassData() const { return &_class_data_; }


void OpProfileData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpProfileData*>(&to_msg);
  auto& from = static_cast<const OpProfileData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.profiling.OpProfileData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_type(from._internal_node_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inference_microseconds()->::tflite::profiling::OpProfilingStat::MergeFrom(
          from._internal_inference_microseconds());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mem_kb()->::tflite::profiling::OpProfilingStat::MergeFrom(
          from._internal_mem_kb());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.times_called_ = from._impl_.times_called_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.run_order_ = from._impl_.run_order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpProfileData::CopyFrom(const OpProfileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.profiling.OpProfileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpProfileData::IsInitialized() const {
  return true;
}

void OpProfileData::InternalSwap(OpProfileData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_type_, lhs_arena,
      &other->_impl_.node_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpProfileData, _impl_.run_order_)
      + sizeof(OpProfileData::_impl_.run_order_)
      - PROTOBUF_FIELD_OFFSET(OpProfileData, _impl_.inference_microseconds_)>(
          reinterpret_cast<char*>(&_impl_.inference_microseconds_),
          reinterpret_cast<char*>(&other->_impl_.inference_microseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpProfileData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_getter, &descriptor_table_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2flite_2fprofiling_2fproto_2fprofiling_5finfo_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace profiling
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::profiling::BenchmarkProfilingData*
Arena::CreateMaybeMessage< ::tflite::profiling::BenchmarkProfilingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::BenchmarkProfilingData >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::ModelProfilingData*
Arena::CreateMaybeMessage< ::tflite::profiling::ModelProfilingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::ModelProfilingData >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::SubGraphProfilingData*
Arena::CreateMaybeMessage< ::tflite::profiling::SubGraphProfilingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::SubGraphProfilingData >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::DelegateProfilingData*
Arena::CreateMaybeMessage< ::tflite::profiling::DelegateProfilingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::DelegateProfilingData >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::OpProfilingStat*
Arena::CreateMaybeMessage< ::tflite::profiling::OpProfilingStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::OpProfilingStat >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::profiling::OpProfileData*
Arena::CreateMaybeMessage< ::tflite::profiling::OpProfileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::profiling::OpProfileData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

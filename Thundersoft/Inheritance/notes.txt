Here are detailed and practical examples for every type of inheritance in C++ that will help you gain a deep understanding of the concept:

1. Single Inheritance

A single derived class inherits from a single base class.

#include <iostream>
using namespace std;

// Base class
class Animal {
protected:
    string name;

public:
    Animal(string n) : name(n) {}
    void display() {
        cout << "This is an animal named " << name << "." << endl;
    }
};

// Derived class
class Dog : public Animal {
private:
    string breed;

public:
    Dog(string n, string b) : Animal(n), breed(b) {}
    void bark() {
        cout << name << " barks loudly. It is a " << breed << "." << endl;
    }
};

int main() {
    Dog dog("Buddy", "Golden Retriever");
    dog.display(); // Accessing base class method
    dog.bark();    // Accessing derived class method
    return 0;
}

2. Multiple Inheritance

A derived class inherits from two or more base classes.

#include <iostream>
using namespace std;

// Base class 1
class Person {
protected:
    string name;

public:
    Person(string n) : name(n) {}
};

// Base class 2
class Worker {
protected:
    string profession;

public:
    Worker(string p) : profession(p) {}
};

// Derived class
class Manager : public Person, public Worker {
public:
    Manager(string n, string p) : Person(n), Worker(p) {}
    void display() {
        cout << name << " is a " << profession << "." << endl;
    }
};

int main() {
    Manager manager("Alice", "Software Engineer");
    manager.display();
    return 0;
}

3. Multilevel Inheritance

A class derives from another derived class.

#include <iostream>
using namespace std;

// Base class
class Vehicle {
protected:
    int speed;

public:
    Vehicle(int s) : speed(s) {}
    void displaySpeed() {
        cout << "Speed: " << speed << " km/h" << endl;
    }
};

// Intermediate derived class
class Car : public Vehicle {
protected:
    string brand;

public:
    Car(string b, int s) : Vehicle(s), brand(b) {}
    void displayBrand() {
        cout << "Brand: " << brand << endl;
    }
};

// Final derived class
class SportsCar : public Car {
private:
    int horsepower;

public:
    SportsCar(string b, int s, int hp) : Car(b, s), horsepower(hp) {}
    void display() {
        displayBrand();
        displaySpeed();
        cout << "Horsepower: " << horsepower << " HP" << endl;
    }
};

int main() {
    SportsCar car("Ferrari", 320, 600);
    car.display();
    return 0;
}

4. Hierarchical Inheritance

Multiple derived classes inherit from the same base class.

#include <iostream>
using namespace std;

// Base class
class Shape {
protected:
    double dimension;

public:
    Shape(double d) : dimension(d) {}
    virtual void displayArea() = 0; // Pure virtual function
};

// Derived class 1
class Square : public Shape {
public:
    Square(double side) : Shape(side) {}
    void displayArea() override {
        cout << "Square area: " << dimension * dimension << endl;
    }
};

// Derived class 2
class Circle : public Shape {
public:
    Circle(double radius) : Shape(radius) {}
    void displayArea() override {
        cout << "Circle area: " << 3.14 * dimension * dimension << endl;
    }
};

int main() {
    Square square(4);
    Circle circle(5);

    square.displayArea();
    circle.displayArea();

    return 0;
}

5. Hybrid Inheritance

A combination of multiple and hierarchical inheritance. Typically, it involves virtual inheritance to resolve ambiguities.

#include <iostream>
using namespace std;

// Base class
class Device {
public:
    void powerOn() {
        cout << "Device powered on." << endl;
    }
};

// Intermediate base class 1
class Phone : virtual public Device {
public:
    void call() {
        cout << "Calling from phone..." << endl;
    }
};

// Intermediate base class 2
class Camera : virtual public Device {
public:
    void takePhoto() {
        cout << "Photo taken with camera." << endl;
    }
};

// Final derived class
class Smartphone : public Phone, public Camera {
public:
    void useSmartFeatures() {
        cout << "Using smart features." << endl;
    }
};

int main() {
    Smartphone smartphone;
    smartphone.powerOn();    // No ambiguity due to virtual inheritance
    smartphone.call();
    smartphone.takePhoto();
    smartphone.useSmartFeatures();

    return 0;
}

6. Virtual Inheritance

Solves the diamond problem where ambiguity arises due to multiple inheritance paths.

Problem:

#include <iostream>
using namespace std;

class A {
public:
    void display() {
        cout << "Display from A" << endl;
    }
};

class B : public A {};
class C : public A {};
class D : public B, public C {}; // Diamond problem: which A::display to call?

int main() {
    D obj;
    obj.display(); // Error: Ambiguous
    return 0;
}

Solution with Virtual Inheritance:

#include <iostream>
using namespace std;

class A {
public:
    void display() {
        cout << "Display from A" << endl;
    }
};

class B : virtual public A {};
class C : virtual public A {};
class D : public B, public C {};

int main() {
    D obj;
    obj.display(); // Unambiguous due to virtual inheritance
    return 0;
}

7. Abstract Base Class

A class with at least one pure virtual function acts as an abstract base class.

#include <iostream>
using namespace std;

// Abstract base class
class Employee {
protected:
    string name;

public:
    Employee(string n) : name(n) {}
    virtual void displayDetails() = 0; // Pure virtual function
};

// Derived class
class Developer : public Employee {
private:
    string language;

public:
    Developer(string n, string lang) : Employee(n), language(lang) {}
    void displayDetails() override {
        cout << name << " is a developer skilled in " << language << "." << endl;
    }
};

// Another derived class
class Manager : public Employee {
private:
    int teamSize;

public:
    Manager(string n, int size) : Employee(n), teamSize(size) {}
    void displayDetails() override {
        cout << name << " manages a team of " << teamSize << " members." << endl;
    }
};

int main() {
    Employee* dev = new Developer("Alice", "C++");
    Employee* mgr = new Manager("Bob", 10);

    dev->displayDetails();
    mgr->displayDetails();

    delete dev;
    delete mgr;
    return 0;
}

Summary of Key Concepts:

	1.	Single Inheritance: One class derives from another.
	2.	Multiple Inheritance: A class inherits from multiple base classes.
	3.	Multilevel Inheritance: A chain of inheritance.
	4.	Hierarchical Inheritance: Multiple derived classes from a single base class.
	5.	Hybrid Inheritance: Combines multiple and hierarchical inheritance.
	6.	Virtual Inheritance: Resolves ambiguity in diamond problems.
	7.	Abstract Base Class: Enforces derived classes to implement specific functionality.

These examples should give you a comprehensive understanding of all types of inheritance. Let me know if you need further clarification!
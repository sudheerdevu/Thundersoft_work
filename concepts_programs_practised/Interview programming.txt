Here are some interview-style programming exercises for each of the C++ concepts you’ve covered. These challenges will reinforce your understanding and prepare you for practical applications in interviews.

1. new and delete

Problem: Write a program that dynamically allocates memory for an integer array based on user input. Initialize each element with its index value, display the array, and then deallocate the memory.

Sample Code Structure:

#include <iostream>
using namespace std;

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    int* arr = new int[size];
    for (int i = 0; i < size; ++i) {
        arr[i] = i;
    }

    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    delete[] arr;
    return 0;
}

2. Scope Resolution Operator

Problem: Create a class Counter that counts the number of objects created. Use the scope resolution operator to define functions outside the class. Track and print the count of objects created and destroyed.

Sample Code Structure:

#include <iostream>
using namespace std;

class Counter {
private:
    static int count;

public:
    Counter();
    ~Counter();
    static void showCount();
};

int Counter::count = 0;

Counter::Counter() {
    ++count;
}

Counter::~Counter() {
    --count;
}

void Counter::showCount() {
    cout << "Active objects: " << count << endl;
}

int main() {
    Counter c1, c2;
    Counter::showCount();
    {
        Counter c3;
        Counter::showCount();
    }
    Counter::showCount();
    return 0;
}

3. Reference

Problem: Write a function swapValues that takes two integers by reference and swaps their values without using a temporary variable.

Sample Code Structure:

#include <iostream>
using namespace std;

void swapValues(int& a, int& b) {
    a = a + b;
    b = a - b;
    a = a - b;
}

int main() {
    int x = 5, y = 10;
    swapValues(x, y);
    cout << "Swapped values: x = " << x << ", y = " << y << endl;
    return 0;
}

4. Functions and Inline Functions

Problem: Implement an inline function square to calculate the square of a number and use it in a program to print squares of numbers from 1 to 10.

Sample Code Structure:

#include <iostream>
using namespace std;

inline int square(int x) {
    return x * x;
}

int main() {
    for (int i = 1; i <= 10; ++i) {
        cout << "Square of " << i << " is " << square(i) << endl;
    }
    return 0;
}

5. Static Data Members and Static Member Functions

Problem: Create a Student class with a static member studentCount that tracks the number of Student objects created. Use a static member function to display the count.

Sample Code Structure:

#include <iostream>
using namespace std;

class Student {
private:
    static int studentCount;

public:
    Student() { ++studentCount; }
    ~Student() { --studentCount; }
    static int getStudentCount() { return studentCount; }
};

int Student::studentCount = 0;

int main() {
    Student s1, s2;
    cout << "Number of students: " << Student::getStudentCount() << endl;
    {
        Student s3;
        cout << "Number of students: " << Student::getStudentCount() << endl;
    }
    cout << "Number of students: " << Student::getStudentCount() << endl;
    return 0;
}

6. const Keyword Uses

Problem: Create a class Rectangle with const member functions getArea and getPerimeter that return the area and perimeter of the rectangle, respectively.

Sample Code Structure:

#include <iostream>
using namespace std;

class Rectangle {
private:
    int width, height;

public:
    Rectangle(int w, int h) : width(w), height(h) {}
    int getArea() const { return width * height; }
    int getPerimeter() const { return 2 * (width + height); }
};

int main() {
    const Rectangle rect(10, 5);
    cout << "Area: " << rect.getArea() << ", Perimeter: " << rect.getPerimeter() << endl;
    return 0;
}

7. Array of Objects

Problem: Create an array of Employee objects, each with attributes name and salary, and initialize it with user input.

Sample Code Structure:

#include <iostream>
using namespace std;

class Employee {
private:
    string name;
    double salary;

public:
    Employee(string n = "", double s = 0.0) : name(n), salary(s) {}
    void display() const { cout << "Name: " << name << ", Salary: $" << salary << endl; }
};

int main() {
    Employee employees[3];
    for (int i = 0; i < 3; ++i) {
        string name;
        double salary;
        cout << "Enter name and salary for employee " << i + 1 << ": ";
        cin >> name >> salary;
        employees[i] = Employee(name, salary);
    }
    for (int i = 0; i < 3; ++i) {
        employees[i].display();
    }
    return 0;
}

8. Friend

Problem: Create a BankAccount class with private balance. Write a friend function displayBalance that accesses and displays the account balance.

Sample Code Structure:

#include <iostream>
using namespace std;

class BankAccount {
private:
    double balance;

public:
    BankAccount(double bal) : balance(bal) {}
    friend void displayBalance(const BankAccount& account);
};

void displayBalance(const BankAccount& account) {
    cout << "Balance: $" << account.balance << endl;
}

int main() {
    BankAccount myAccount(500.75);
    displayBalance(myAccount);
    return 0;
}

9. Constructors

Problem: Create a Point class with a parameterized constructor and a copy constructor. Use the copy constructor to create a new Point object.

Sample Code Structure:

#include <iostream>
using namespace std;

class Point {
private:
    int x, y;

public:
    Point(int a, int b) : x(a), y(b) { cout << "Parameterized constructor called\n"; }
    Point(const Point& p) : x(p.x), y(p.y) { cout << "Copy constructor called\n"; }
    void display() const { cout << "Point(" << x << ", " << y << ")\n"; }
};

int main() {
    Point p1(10, 20);
    Point p2 = p1;  // Copy constructor is called here
    p1.display();
    p2.display();
    return 0;
}

Practicing Inheritance

As you’re working on inheritance, here’s a related challenge to get started:

Problem: Create a base class Person with attributes name and age. Create a derived class Student with an additional attribute studentID. Write a program to input and display information for a Student.

Sample Code Structure:

#include <iostream>
using namespace std;

class Person {
protected:
    string name;
    int age;

public:
    Person(string n, int a) : name(n), age(a) {}
    void display() const { cout << "Name: " << name << ", Age: " << age << endl; }
};

class Student : public Person {
private:
    int studentID;

public:
    Student(string n, int a, int id) : Person(n, a), studentID(id) {}
    void display() const {
        Person::display();
        cout << "Student ID: " << studentID << endl;
    }
};

int main() {
    Student s("Alice", 20, 12345);
    s.display();
    return 0;
}

These exercises cover the key concepts you’ve studied with an emphasis on object-oriented programming, memory management, and core C++ syntax and functionality. They will help you reinforce your understanding and prepare you for technical interviews.
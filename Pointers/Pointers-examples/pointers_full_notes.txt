#Pointers in C++ (With Full Codes)

To help you understand pointers more clearly, I’ll provide full code examples for each major concept, starting from the basics to more advanced uses.

1. Basic Pointers:

Pointer Declaration, Assignment, and Dereferencing:

#include <iostream>

int main() {
    int a = 10;     // A simple integer variable
    int* ptr = &a;  // Pointer storing the address of 'a'

    std::cout << "Address of a: " << ptr << std::endl;
    std::cout << "Value of a (dereferenced from ptr): " << *ptr << std::endl;

    return 0;
}

Explanation:

	•	We create a pointer ptr that holds the address of variable a.
	•	Using the dereference operator *ptr, we access the value stored at the address pointed to by ptr.

2. Null Pointers and Pointer Arithmetic:

Null Pointers:

#include <iostream>

int main() {
    int* ptr = nullptr;  // A pointer initialized to nullptr (doesn't point to anything)

    if (ptr == nullptr) {
        std::cout << "Pointer is null." << std::endl;
    }

    return 0;
}

Pointer Arithmetic:

#include <iostream>

int main() {
    int arr[3] = {10, 20, 30};  // An array of 3 integers
    int* ptr = arr;  // Pointer to the first element of the array

    std::cout << "Address of arr[0]: " << ptr << std::endl;
    std::cout << "Value at arr[0] (dereferenced): " << *ptr << std::endl;

    ptr++;  // Move pointer to the next element
    std::cout << "Value at arr[1] (dereferenced): " << *ptr << std::endl;

    return 0;
}

Explanation:

	•	You can perform arithmetic on pointers to traverse through arrays.
	•	ptr++ moves the pointer to the next integer in the array.

3. Dynamic Memory Allocation:

Allocating and Deallocating a Single Integer:

#include <iostream>

int main() {
    int* ptr = new int;  // Dynamically allocate memory for an integer
    *ptr = 42;  // Assign a value to the dynamically allocated memory

    std::cout << "Value of dynamically allocated memory: " << *ptr << std::endl;

    delete ptr;  // Deallocate the memory

    return 0;
}

Allocating and Deallocating an Array:

#include <iostream>

int main() {
    int* arr = new int[5];  // Dynamically allocate memory for an array of 5 integers

    // Assign values to the array
    for (int i = 0; i < 5; ++i) {
        arr[i] = i * 10;
    }

    // Print array values
    for (int i = 0; i < 5; ++i) {
        std::cout << "arr[" << i << "] = " << arr[i] << std::endl;
    }

    delete[] arr;  // Deallocate memory for the array

    return 0;
}

Explanation:

	•	new is used for dynamic memory allocation.
	•	Use delete[] to free memory allocated for arrays.

4. Pointers to Pointers (Double Pointers):

#include <iostream>

int main() {
    int a = 10;
    int* ptr = &a;    // Pointer to an integer
    int** ptr2 = &ptr;  // Pointer to a pointer (points to ptr)

    std::cout << "Value of a (using double pointer): " << **ptr2 << std::endl;

    return 0;
}

Explanation:

	•	ptr2 holds the address of ptr, and **ptr2 gives the value of a.

5. Function Pointers:

#include <iostream>

// A simple function that we will point to
void display() {
    std::cout << "Hello from a function pointer!" << std::endl;
}

int main() {
    // Declare a function pointer and assign it to the address of 'display'
    void (*funcPtr)() = &display;

    // Call the function through the pointer
    funcPtr();

    return 0;
}

Explanation:

	•	Function pointers allow you to store the address of a function and call it dynamically.

6. Smart Pointers (C++11):

Smart pointers automatically manage memory. Here’s an example using std::unique_ptr.

#include <iostream>
#include <memory>  // Required for smart pointers

int main() {
    std::unique_ptr<int> ptr = std::make_unique<int>(42);  // Allocate memory and assign value 42

    std::cout << "Value of unique_ptr: " << *ptr << std::endl;

    // No need to delete ptr, it's automatically cleaned up when out of scope

    return 0;
}

Explanation:

	•	std::unique_ptr is a smart pointer that automatically deletes the memory when it goes out of scope, eliminating the need for manual delete.

7. Void Pointers:

#include <iostream>

int main() {
    int a = 10;
    void* ptr = &a;  // Void pointer pointing to the address of an integer

    // Typecast the void pointer to int* before dereferencing
    std::cout << "Value pointed to by void pointer: " << *(static_cast<int*>(ptr)) << std::endl;

    return 0;
}

Explanation:

	•	void* can point to any type, but you must typecast it to the appropriate type before dereferencing.

8. Pointers to Class Members:

Pointer to Data Member:

#include <iostream>

class MyClass {
public:
    int data;
};

int main() {
    MyClass obj;
    obj.data = 100;

    int MyClass::*dataPtr = &MyClass::data;  // Pointer to data member

    std::cout << "Value of data via pointer: " << obj.*dataPtr << std::endl;

    return 0;
}

Pointer to Member Function:

#include <iostream>

class MyClass {
public:
    void display() {
        std::cout << "Hello from a member function!" << std::endl;
    }
};

int main() {
    MyClass obj;

    void (MyClass::*funcPtr)() = &MyClass::display;  // Pointer to member function

    (obj.*funcPtr)();  // Calling the member function through the pointer

    return 0;
}

Explanation:

	•	Pointers can point to class members, whether data or functions, allowing you to access them dynamically.

9. Real-World Example: Singly Linked List Using Pointers

#include <iostream>

struct Node {
    int data;
    Node* next;
};

void printList(Node* n) {
    while (n != nullptr) {
        std::cout << n->data << " ";
        n = n->next;
    }
}

int main() {
    Node* head = new Node();
    Node* second = new Node();
    Node* third = new Node();

    head->data = 1;  // Assign data to first node
    head->next = second;  // Link first node with second

    second->data = 2;
    second->next = third;

    third->data = 3;
    third->next = nullptr;

    printList(head);  // Output: 1 2 3

    // Deallocate memory
    delete head;
    delete second;
    delete third;

    return 0;
}

Explanation:

	•	Pointers are used to create a dynamic linked list where each node points to the next node.
	•	You can easily add/remove nodes, and memory is allocated dynamically.

These examples should give you a strong understanding of pointers, from basic pointer declaration and usage to more advanced topics like function pointers, smart pointers, and real-world applications like linked lists. Each of these concepts is foundational to efficient memory management and high-performance programming in C++.